"use strict";!function(){angular.module("Meals",["ui.router"])}(),function(){function e(e,n){e.state("app",{url:"/app",template:"<app-page></app-page>"}).state("app.main",{url:"/main",template:"<main-page></main-page>"}).state("app.main.meals",{url:"/meals",template:"<meals-list id='mealsList'></meals-list>"}).state("app.main.drinks",{url:"/drinks",template:"<drinks-list></drinks-list>"}).state("app.meal",{url:"/meal/:path",controllerAs:"meal",controller:t,template:"<meal-page id='meal' path='{{ meal.path }}'></meal-page>"}).state("app.cart",{url:"/cart",template:"<cart-page id='cart'></cart-page>"}).state("error",{url:"/error",template:"<error-page></error-page>"}),n.otherwise("/app/main/meals")}function t(e){this.path=e.path}e.$inject=["$stateProvider","$urlRouterProvider"],t.$inject=["$stateParams"],angular.module("Meals").config(e)}(),function(){function e(){function e(e){var t=0,n=!0,r=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var i=a.value;t+=i.price}}catch(e){r=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(r)throw o}}return t}function t(){return f}function n(e){f=e}function r(){return s.length}function o(e){m=e}function a(e,t){var n={};n.id=e.id,n.name=e.name,n.price=e.price,n.amount=t,m&&(n.modifiers=m.slice()),m=null,s.push(n)}function l(){return s}function i(){var t=0;if(s.length>0)for(var n=0,r=s.length;n<r;n++)t+=s[n].price*s[n].amount,s[n].modifiers&&(t+=e(s[n].modifiers)*s[n].amount);return t.toFixed(2)}function c(){m=null}function u(){s.splice(f,1)}var s=[],m=null,f=0,p={getIndexEditMeal:t,setIndexEditMeal:n,getCartListCount:r,addModifiersToList:o,addMealToCartList:a,getCartList:l,getTotalPrice:i,deleteModifiers:c,removeMeal:u,getModifiersPrice:e};return p}angular.module("Meals").factory("CartFactory",e)}(),function(){function e(e,t){function n(e,t,n){i(e),u(t),f(n)}function r(t){return e({method:"GET",url:d}).success(function(e){g=e,M=e.currency,t.resolve(e)}).error(function(e,n){t.reject("Error in $http request"),console.log(e),console.log(n)}),t}function o(){return null!==h&&h.modifiers}function a(){var e=t.defer();return g?e.resolve(g):e=r(e),e.promise}function l(){return h}function i(e){h=e}function c(){return C}function u(e){C=e}function s(){return M}function m(){return y}function f(e){y=e}function p(e){h=g.products.filter(function(t){return t.id===e})[0],h||(h=g.drinks.filter(function(t){return t.id===e})[0])}var d="meals.json",g=null,M="",h=null,C="new",y=1,v={getModifiers:o,getMeals:a,getCurrentMeal:l,setCurrentMeal:i,getCurrentMealStatus:c,setCurrentMealStatus:u,getCurrency:s,getCurrentMealAmount:m,setCurrentMealAmount:f,setCurrentMealById:p,openMeal:n};return v}e.$inject=["$http","$q"],angular.module("Meals").factory("MealsFactory",e)}(),function(){function e(e){function t(){var t=e.getCartList()[e.getIndexEditMeal()];return t.modifiers}function n(e,t){return e.some(function(e){return t.name===e.name})}function r(e,t){return e.filter(function(e){return t.name!==e.name})}function o(t,o){var a=t.slice();return n(a,o)?a=r(a,o):a.push(o),e.addModifiersToList(a),a}function a(e,t){var n=[];if(t)for(var r=0,o=t.length;r<o;r++)for(var a=0,l=e.length;a<l;a++)e[a].name===t[r].name&&(e[a].check=!0,n.push(e[a]));return n}var l={getCheckedModifiers:t,modifierHasBeenSelected:n,deleteModifier:r,selectModifier:o,pickCheckedModifiers:a};return l}e.$inject=["CartFactory"],angular.module("Meals").factory("ModifiersFactory",e)}(),function(){function e(){}angular.module("Meals").component("appPage",{templateUrl:"component-templates/app/template/appPage.html",bindings:{},controllerAs:"app",controller:e})}(),function(){function e(e,t){function n(n,r){t.setIndexEditMeal(r),e.setCurrentMealById(n.id),e.setCurrentMealAmount(n.amount),e.setCurrentMealStatus("edit")}var r=this;r.currency=e.getCurrency(),r.cartList=t.getCartList(),r.totalPrice=t.getTotalPrice(),r.editMeal=n}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("cartPage",{templateUrl:"component-templates/cart/template/cartPage.html",bindings:{},controllerAs:"cart",controller:e})}(),function(){function e(){}angular.module("Meals").component("cartIconPage",{templateUrl:"component-templates/cartIcon/template/cartIconPage.html",bindings:{count:"@"},controllerAs:"cartIcon",controller:e})}(),function(){function e(){}angular.module("Meals").component("errorPage",{templateUrl:"component-templates/error/template/errorPage.html",bindings:{},controllerAs:"error",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){a.currency=e.currency,a.drinks=e.drinks}function r(t){e.openMeal(t,"new",1)}function o(){return a.onlySoftDrinks?a.drinks.filter(function(e){return e.tipple!==!0}):a.drinks}var a=this;a.drinks=[],a.onlySoftDrinks=!1,a.currency="",a.openDrink=r,a.getDrinksForView=o,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("drinksList",{templateUrl:"component-templates/drinksList/template/drinksList.html",bindings:{},controllerAs:"drinksList",controller:e})}(),function(){function e(){}angular.module("Meals").component("footerPage",{templateUrl:"component-templates/footer/template/footerPage.html",bindings:{},controllerAs:"footer",controller:e})}(),function(){function e(){}angular.module("Meals").component("headerPage",{templateUrl:"component-templates/header/template/headerPage.html",bindings:{},controllerAs:"header",controller:e})}(),function(){function e(){}angular.module("Meals").component("logoPage",{templateUrl:"component-templates/logo/template/logoPage.html",bindings:{},controllerAs:"logo",controller:e})}(),function(){function e(){}angular.module("Meals").component("mainPage",{templateUrl:"component-templates/main/template/mainPage.html",bindings:{},controllerAs:"main",controller:e})}(),function(){function e(e,t){function n(){t.addMealToCartList(a.currentMeal,a.selectAmount)}function r(){t.removeMeal(),t.deleteModifiers()}function o(){t.removeMeal(),a.addMeal()}var a=this;a.currentMeal=e.getCurrentMeal(),a.currency=e.getCurrency(),a.selectAmount=e.getCurrentMealAmount(),a.mealStatus=e.getCurrentMealStatus(),a.cartCount=t.getCartListCount(),a.addMeal=n,a.removeMeal=r,a.saveMeal=o}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("mealPage",{templateUrl:"component-templates/meal/template/mealPage.html",bindings:{path:"@"},controllerAs:"meal",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){o.currency=e.currency,o.products=e.products}function r(t){e.openMeal(t,"new",1)}var o=this;o.openMeal=r,o.currency="",o.products=null,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("mealsList",{templateUrl:"component-templates/mealsList/template/mealsList.html",bindings:{},controllerAs:"mealsList",controller:e})}(),function(){function e(){}angular.module("Meals").component("menuPage",{templateUrl:"component-templates/menu/template/menuPage.html",bindings:{},controllerAs:"menu",controller:e})}(),function(){function e(e,t){function n(){o.modifiers&&o.modifiers.forEach(function(e){return e.check=!1})}function r(e){a=t.selectModifier(a,e)}var o=this,a=[];if(o.modifiers=e.getModifiers(),o.selectModifier=r,o.cleanPickModifiers=n,o.cleanPickModifiers(),"edit"===e.getCurrentMealStatus()){var l=t.getCheckedModifiers();a=t.pickCheckedModifiers(o.modifiers,l)}}e.$inject=["MealsFactory","ModifiersFactory"],angular.module("Meals").component("modifiersPage",{templateUrl:"component-templates/modifiers/template/modifiersPage.html",bindings:{currency:"@"},controllerAs:"mod",controller:e})}(),function(){function e(){function e(e){n.select=e}function t(e){return n.select===e}var n=this;n.selectNum=e,n.activeNum=t}angular.module("Meals").component("selectCount",{templateUrl:"component-templates/selectCount/template/selectCountPage.html",bindings:{select:"="},controllerAs:"select",controller:e})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
