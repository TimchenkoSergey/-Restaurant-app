"use strict";!function(){angular.module("Meals",["ui.router"])}(),function(){function e(e,n){e.state("app",{url:"/app",template:"<app-page></app-page>"}).state("app.main",{url:"/main",template:"<main-page></main-page>"}).state("app.main.meals",{url:"/meals",template:"<meals-list id='mealsList'></meals-list>"}).state("app.main.drinks",{url:"/drinks",template:"<drinks-list></drinks-list>"}).state("app.meal",{url:"/meal/:path",controllerAs:"meal",controller:t,template:"<meal-page id='meal' path='{{ meal.path }}'></meal-page>"}).state("app.cart",{url:"/cart",template:"<cart-page id='cart'></cart-page>"}).state("error",{url:"/error",template:"<error-page></error-page>"}),n.otherwise("/app/main/meals")}function t(e){this.path=e.path}e.$inject=["$stateProvider","$urlRouterProvider"],t.$inject=["$stateParams"],angular.module("Meals").config(e)}(),function(){function e(){function e(e){var t=0,n=!0,r=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var i=a.value;t+=i.price}}catch(e){r=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(r)throw o}}return t}function t(){return f}function n(e){f=e}function r(){return s.length}function o(e){m=e}function a(e,t){var n={};n.id=e.id,n.name=e.name,n.price=e.price,n.amount=t,m&&(n.modifiers=m.slice()),m=null,s.push(n)}function l(){return s}function i(){var t=0;if(s.length>0)for(var n=0,r=s.length;n<r;n++)t+=s[n].price*s[n].amount,s[n].modifiers&&(t+=e(s[n].modifiers)*s[n].amount);return t.toFixed(2)}function c(){m=null}function u(){s.splice(f,1)}var s=[],m=null,f=0,p={getIndexEditMeal:t,setIndexEditMeal:n,getCartListCount:r,addModifiersToList:o,addMealToCartList:a,getCartList:l,getTotalPrice:i,deleteModifiers:c,removeMeal:u,getModifiersPrice:e};return p}angular.module("Meals").factory("CartFactory",e)}(),function(){function e(e,t){function n(e,t,n){i(e),u(t),f(n)}function r(t){return e({method:"GET",url:d}).success(function(e){g=e,M=e.currency,t.resolve(e)}).error(function(e,n){t.reject("Error in $http request"),console.log(e),console.log(n)}),t}function o(){return null!==h&&h.modifiers}function a(){var e=t.defer();return g?e.resolve(g):e=r(e),e.promise}function l(){return h}function i(e){h=e}function c(){return C}function u(e){C=e}function s(){return M}function m(){return y}function f(e){y=e}function p(e){h=g.products.filter(function(t){return t.id===e})[0],h||(h=g.drinks.filter(function(t){return t.id===e})[0])}var d="meals.json",g=null,M="",h=null,C="new",y=1,v={getModifiers:o,getMeals:a,getCurrentMeal:l,setCurrentMeal:i,getCurrentMealStatus:c,setCurrentMealStatus:u,getCurrency:s,getCurrentMealAmount:m,setCurrentMealAmount:f,setCurrentMealById:p,openMeal:n};return v}e.$inject=["$http","$q"],angular.module("Meals").factory("MealsFactory",e)}(),function(){function e(e){function t(){var t=e.getCartList()[e.getIndexEditMeal()];return t.modifiers}function n(e,t){return e.some(function(e){return t.name===e.name})}function r(e,t){return e.filter(function(e){return t.name!==e.name})}function o(t,o){n(t,o)?t=r(t,o):t.push(o),e.addModifiersToList(t)}function a(e,t,n){if(n)for(var r=0,a=n.length;r<a;r++)for(var l=0,i=e.length;l<i;l++)e[l].name===n[r].name&&(e[l].check=!0,o(t,e[l]))}var l={getCheckedModifiers:t,modifierHasBeenSelected:n,deleteModifier:r,selectModifier:o,pickCheckedModifiers:a};return l}e.$inject=["CartFactory"],angular.module("Meals").factory("ModifiersFactory",e)}(),function(){function e(){}angular.module("Meals").component("appPage",{templateUrl:"component-templates/app/template/appPage.html",bindings:{},controllerAs:"app",controller:e})}(),function(){function e(e,t){function n(n,r){t.setIndexEditMeal(r),e.setCurrentMealById(n.id),e.setCurrentMealAmount(n.amount),e.setCurrentMealStatus("edit")}var r=this;r.currency=e.getCurrency(),r.cartList=t.getCartList(),r.totalPrice=t.getTotalPrice(),r.editMeal=n}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("cartPage",{templateUrl:"component-templates/cart/template/cartPage.html",bindings:{},controllerAs:"cart",controller:e})}(),function(){function e(){}angular.module("Meals").component("cartIconPage",{templateUrl:"component-templates/cartIcon/template/cartIconPage.html",bindings:{count:"@"},controllerAs:"cartIcon",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){a.currency=e.currency,a.drinks=e.drinks}function r(t){e.openMeal(t,"new",1)}function o(){return a.onlySoftDrinks?a.drinks.filter(function(e){return e.tipple!==!0}):a.drinks}var a=this;a.drinks=[],a.onlySoftDrinks=!1,a.currency="",a.openDrink=r,a.getDrinksForView=o,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("drinksList",{templateUrl:"component-templates/drinksList/template/drinksList.html",bindings:{},controllerAs:"drinksList",controller:e})}(),function(){function e(){}angular.module("Meals").component("errorPage",{templateUrl:"component-templates/error/template/errorPage.html",bindings:{},controllerAs:"error",controller:e})}(),function(){function e(){}angular.module("Meals").component("footerPage",{templateUrl:"component-templates/footer/template/footerPage.html",bindings:{},controllerAs:"footer",controller:e})}(),function(){function e(){}angular.module("Meals").component("headerPage",{templateUrl:"component-templates/header/template/headerPage.html",bindings:{},controllerAs:"header",controller:e})}(),function(){function e(){}angular.module("Meals").component("logoPage",{templateUrl:"component-templates/logo/template/logoPage.html",bindings:{},controllerAs:"logo",controller:e})}(),function(){function e(){}angular.module("Meals").component("mainPage",{templateUrl:"component-templates/main/template/mainPage.html",bindings:{},controllerAs:"main",controller:e})}(),function(){function e(e,t){function n(){t.addMealToCartList(a.currentMeal,a.selectAmount)}function r(){t.removeMeal(),t.deleteModifiers()}function o(){t.removeMeal(),a.addMeal()}var a=this;a.currentMeal=e.getCurrentMeal(),a.currency=e.getCurrency(),a.selectAmount=e.getCurrentMealAmount(),a.mealStatus=e.getCurrentMealStatus(),a.cartCount=t.getCartListCount(),a.addMeal=n,a.removeMeal=r,a.saveMeal=o}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("mealPage",{templateUrl:"component-templates/meal/template/mealPage.html",bindings:{path:"@"},controllerAs:"meal",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){o.currency=e.currency,o.products=e.products}function r(t){e.openMeal(t,"new",1)}var o=this;o.openMeal=r,o.currency="",o.products=null,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("mealsList",{templateUrl:"component-templates/mealsList/template/mealsList.html",bindings:{},controllerAs:"mealsList",controller:e})}(),function(){function e(){}angular.module("Meals").component("menuPage",{templateUrl:"component-templates/menu/template/menuPage.html",bindings:{},controllerAs:"menu",controller:e})}(),function(){function e(e,t){function n(){o.modifiers&&o.modifiers.forEach(function(e){return e.check=!1})}function r(e){t.selectModifier(a,e)}var o=this,a=[];if(o.modifiers=e.getModifiers(),o.selectModifier=r,o.cleanPickModifiers=n,o.cleanPickModifiers(),"edit"===e.getCurrentMealStatus()){var l=t.getCheckedModifiers();t.pickCheckedModifiers(o.modifiers,a,l)}}e.$inject=["MealsFactory","ModifiersFactory"],angular.module("Meals").component("modifiersPage",{templateUrl:"component-templates/modifiers/template/modifiersPage.html",bindings:{currency:"@"},controllerAs:"mod",controller:e})}(),function(){function e(){function e(e){n.select=e}function t(e){return n.select===e}var n=this;n.selectNum=e,n.activeNum=t}angular.module("Meals").component("selectCount",{templateUrl:"component-templates/selectCount/template/selectCountPage.html",bindings:{select:"="},controllerAs:"select",controller:e})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIm1haW4uanMiLCJjb25maWcuanMiLCJjYXJ0RmFjdG9yeS5qcyIsIm1lYWxzRmFjdG9yeS5qcyIsIm1vZGlmaWVyc0ZhY3RvcnkuanMiLCJhcHAvYXBwLmpzIiwiY2FydC9jYXJ0LmpzIiwiY2FydEljb24vY2FydEljb24uanMiLCJkcmlua3NMaXN0L2RyaW5rc0xpc3QuanMiLCJlcnJvci9lcnJvci5qcyIsImZvb3Rlci9mb290ZXIuanMiLCJoZWFkZXIvaGVhZGVyLmpzIiwibG9nby9sb2dvLmpzIiwibWFpbi9tYWluLmpzIiwibWVhbC9tZWFsLmpzIiwibWVhbHNMaXN0L21lYWxzTGlzdC5qcyIsIm1lbnUvbWVudS5qcyIsIm1vZGlmaWVycy9tb2RpZmllcnMuanMiLCJzZWxlY3RDb3VudC9zZWxlY3RDb3VudC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlIiwiY29udHJvbGxlckFzIiwiY29udHJvbGxlciIsIk1lYWxDb250cm9sbGVyIiwib3RoZXJ3aXNlIiwiJHN0YXRlUGFyYW1zIiwidGhpcyIsInBhdGgiLCJDYXJ0RmFjdG9yeSIsImdldE1vZGlmaWVyc1ByaWNlIiwibW9kaWZpZXJzQXJyIiwidG90YWxQcmljZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwidW5kZWZpbmVkIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwibW9kaWZpZXIiLCJ2YWx1ZSIsInByaWNlIiwiZXJyIiwicmV0dXJuIiwiZ2V0SW5kZXhFZGl0TWVhbCIsImluZGV4RWRpdE1lYWwiLCJzZXRJbmRleEVkaXRNZWFsIiwiaW5kZXgiLCJnZXRDYXJ0TGlzdENvdW50IiwiY2FydExpc3QiLCJsZW5ndGgiLCJhZGRNb2RpZmllcnNUb0xpc3QiLCJtb2RpZiIsIm1vZGlmaWVycyIsImFkZE1lYWxUb0NhcnRMaXN0IiwibWVhbCIsImFtb3VudCIsIm5ld01lYWwiLCJpZCIsIm5hbWUiLCJzbGljZSIsInB1c2giLCJnZXRDYXJ0TGlzdCIsImdldFRvdGFsUHJpY2UiLCJpIiwibGVuIiwidG9GaXhlZCIsImRlbGV0ZU1vZGlmaWVycyIsInJlbW92ZU1lYWwiLCJzcGxpY2UiLCJmYWN0b3J5IiwiTWVhbHNGYWN0b3J5IiwiJGh0dHAiLCIkcSIsIm9wZW5NZWFsIiwic3RhdHVzIiwic2V0Q3VycmVudE1lYWwiLCJzZXRDdXJyZW50TWVhbFN0YXR1cyIsInNldEN1cnJlbnRNZWFsQW1vdW50IiwiZ2V0TWVhbHNGcm9tSHR0cCIsImRlZmVycmVkIiwibWV0aG9kIiwibWVhbEFwaVVybCIsInN1Y2Nlc3MiLCJkYXRhIiwibWVhbHMiLCJjdXJyZW5jeSIsInJlc29sdmUiLCJlcnJvciIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJnZXRNb2RpZmllcnMiLCJjdXJyZW50TWVhbCIsImdldE1lYWxzIiwiZGVmZXIiLCJwcm9taXNlIiwiZ2V0Q3VycmVudE1lYWwiLCJnZXRDdXJyZW50TWVhbFN0YXR1cyIsImN1cnJlbnRNZWFsU3RhdHVzIiwiZ2V0Q3VycmVuY3kiLCJnZXRDdXJyZW50TWVhbEFtb3VudCIsImN1cnJlbnRBbW91bnQiLCJzZXRDdXJyZW50TWVhbEJ5SWQiLCJwcm9kdWN0cyIsImZpbHRlciIsIml0ZW0iLCJkcmlua3MiLCJNb2RpZmllcnNGYWN0b3J5IiwiZ2V0Q2hlY2tlZE1vZGlmaWVycyIsIm1vZGlmaWVySGFzQmVlblNlbGVjdGVkIiwic2VsZWN0ZWRNb2RpZmllcnMiLCJzb21lIiwiZGVsZXRlTW9kaWZpZXIiLCJzZWxlY3RNb2RpZmllciIsInBpY2tDaGVja2VkTW9kaWZpZXJzIiwiY2hlY2tlZE1vZGlmaWVycyIsImxlbkNoZWNrZWRNb2RpZmllcnMiLCJqIiwibGVuTW9kaWZpZXJzIiwiY2hlY2siLCJBcHBDb250cm9sbGVyIiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJiaW5kaW5ncyIsIkNhcnRDb250cm9sbGVyIiwiZWRpdE1lYWwiLCJ2bSIsIkNhcnRJY29uQ29udHJvbGxlciIsImNvdW50IiwiRHJpbmtzTGlzdENvbnRyb2xsZXIiLCJhY3RpdmF0ZSIsInRoZW4iLCJnZXREcmlua3MiLCJkcmlua3NPYmoiLCJvcGVuRHJpbmsiLCJkcmluayIsImdldERyaW5rc0ZvclZpZXciLCJvbmx5U29mdERyaW5rcyIsInRpcHBsZSIsIkVycm9yQ29udHJvbGxlciIsIkZvb3RlckNvbnRyb2xsZXIiLCJIZWFkZXJDb250cm9sbGVyIiwiTG9nb0NvbnRyb2xsZXIiLCJNYWluQ29udHJvbGxlciIsImFkZE1lYWwiLCJzZWxlY3RBbW91bnQiLCJzYXZlTWVhbCIsIm1lYWxTdGF0dXMiLCJjYXJ0Q291bnQiLCJNZWFsc0xpc3RDb250cm9sbGVyIiwiZ2V0UHJvZHVjdHMiLCJtZWFsc09iaiIsIk1lbnVDb250cm9sbGVyIiwiTW9kaWZpZXJzQ29udHJvbGxlciIsImNsZWFuUGlja01vZGlmaWVycyIsImZvckVhY2giLCJTZWxlY3RDb3VudENvbnRyb2xsZXIiLCJzZWxlY3ROdW0iLCJudW0iLCJzZWxlY3QiLCJhY3RpdmVOdW0iXSwibWFwcGluZ3MiOiJBQUFBLGNDQUEsV0FHSUEsUUFDS0MsT0FBTyxTQUNKLGlCQ0xaLFdBT0ksUUFBU0MsR0FBT0MsRUFBZ0JDLEdBRTVCRCxFQUNLRSxNQUFNLE9BQ0hDLElBQUssT0FDTEMsU0FBVSwwQkFFYkYsTUFBTSxZQUNIQyxJQUFLLFFBQ0xDLFNBQVUsNEJBRWJGLE1BQU0sa0JBQ0hDLElBQUssU0FDTEMsU0FBVSw2Q0FFYkYsTUFBTSxtQkFDSEMsSUFBSyxVQUNMQyxTQUFVLGdDQUViRixNQUFNLFlBQ0hDLElBQUssY0FDTEUsYUFBYyxPQUNkQyxXQUFZQyxFQUNaSCxTQUFVLDZEQUViRixNQUFNLFlBQ0hDLElBQUssUUFDTEMsU0FBVSxzQ0FF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ZixNQUFPaEMsR0FBR2lDLFNBQVdELEVBOUJ6QixHQUFNaEMsR0FBS3hHLElBRVh3RyxHQUFHK0IsVUFBWUEsRUFDZi9CLEVBQUdrQyxVQUFZQSxFQWxDbkJ2SixRQUNLQyxPQUFPLFNBV1ArRyxVQUFVLGVBQ1BDLFlBQWEsZ0VBQ2JDLFVBQ0lvQyxPQUFRLEtBRVo5SSxhQUFjLFNBQ2RDLFdBQVkwSSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIiwgW1widWkucm91dGVyXCJdKTtcbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29uZmlnKGNvbmZpZyk7XG5cbiAgICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiYXBwXCIsIHtcbiAgICAgICAgICAgIHVybDogXCIvYXBwXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8YXBwLXBhZ2U+PC9hcHAtcGFnZT5cIlxuICAgICAgICB9KS5zdGF0ZShcImFwcC5tYWluXCIsIHtcbiAgICAgICAgICAgIHVybDogXCIvbWFpblwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPG1haW4tcGFnZT48L21haW4tcGFnZT5cIlxuICAgICAgICB9KS5zdGF0ZShcImFwcC5tYWluLm1lYWxzXCIsIHtcbiAgICAgICAgICAgIHVybDogXCIvbWVhbHNcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxtZWFscy1saXN0IGlkPSdtZWFsc0xpc3QnPjwvbWVhbHMtbGlzdD5cIlxuICAgICAgICB9KS5zdGF0ZShcImFwcC5tYWluLmRyaW5rc1wiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL2RyaW5rc1wiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRyaW5rcy1saXN0PjwvZHJpbmtzLWxpc3Q+XCJcbiAgICAgICAgfSkuc3RhdGUoXCJhcHAubWVhbFwiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL21lYWwvOnBhdGhcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJtZWFsXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBNZWFsQ29udHJvbGxlcixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxtZWFsLXBhZ2UgaWQ9J21lYWwnIHBhdGg9J3t7IG1lYWwucGF0aCB9fSc+PC9tZWFsLXBhZ2U+XCJcbiAgICAgICAgfSkuc3RhdGUoXCJhcHAuY2FydFwiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL2NhcnRcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxjYXJ0LXBhZ2UgaWQ9J2NhcnQnPjwvY2FydC1wYWdlPlwiXG4gICAgICAgIH0pLnN0YXRlKFwiZXJyb3JcIiwge1xuICAgICAgICAgICAgdXJsOiBcIi9lcnJvclwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGVycm9yLXBhZ2U+PC9lcnJvci1wYWdlPlwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvYXBwL21haW4vbWVhbHNcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTWVhbENvbnRyb2xsZXIoJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgIHRoaXMucGF0aCA9ICRzdGF0ZVBhcmFtcy5wYXRoO1xuICAgIH1cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuZmFjdG9yeShcIkNhcnRGYWN0b3J5XCIsIENhcnRGYWN0b3J5KTtcblxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2VcclxuICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBGYWN0b3J5IHdvcmsgd2l0aCBjYXJ0LlxyXG4gICAgICpcclxuICAgICAqKi9cbiAgICBmdW5jdGlvbiBDYXJ0RmFjdG9yeSgpIHtcblxuICAgICAgICB2YXIgY2FydExpc3QgPSBbXSxcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IG51bGwsXG4gICAgICAgICAgICBpbmRleEVkaXRNZWFsID0gMCxcbiAgICAgICAgICAgIGZhY3RvcnkgPSB7XG4gICAgICAgICAgICBnZXRJbmRleEVkaXRNZWFsOiBnZXRJbmRleEVkaXRNZWFsLFxuICAgICAgICAgICAgc2V0SW5kZXhFZGl0TWVhbDogc2V0SW5kZXhFZGl0TWVhbCxcbiAgICAgICAgICAgIGdldENhcnRMaXN0Q291bnQ6IGdldENhcnRMaXN0Q291bnQsXG4gICAgICAgICAgICBhZGRNb2RpZmllcnNUb0xpc3Q6IGFkZE1vZGlmaWVyc1RvTGlzdCxcbiAgICAgICAgICAgIGFkZE1lYWxUb0NhcnRMaXN0OiBhZGRNZWFsVG9DYXJ0TGlzdCxcbiAgICAgICAgICAgIGdldENhcnRMaXN0OiBnZXRDYXJ0TGlzdCxcbiAgICAgICAgICAgIGdldFRvdGFsUHJpY2U6IGdldFRvdGFsUHJpY2UsXG4gICAgICAgICAgICBkZWxldGVNb2RpZmllcnM6IGRlbGV0ZU1vZGlmaWVycyxcbiAgICAgICAgICAgIHJlbW92ZU1lYWw6IHJlbW92ZU1lYWwsXG4gICAgICAgICAgICBnZXRNb2RpZmllcnNQcmljZTogZ2V0TW9kaWZpZXJzUHJpY2VcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZmFjdG9yeTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjZ2V0TW9kaWZpZXJzUHJpY2VcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gdG90YWwgcHJpY2Ugb2YgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gbW9kaWZpZXJzQXJyIEFycmF5IG9mIG1vZGlmaWVycyBvYmplY3RzLlxyXG4gICAgICAgICAqIEByZXR1cm4ge251bWJlcn0gVG90YWwgcHJpY2UuXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiBnZXRNb2RpZmllcnNQcmljZShtb2RpZmllcnNBcnIpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbFByaWNlID0gMDtcblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbW9kaWZpZXJzQXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kaWZpZXIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IG1vZGlmaWVyLnByaWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0b3RhbFByaWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2dldEluZGV4RWRpdE1lYWxcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gaW5kZXggZm8gZWRpdCBtZWFsLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7bnVtYmVyfSBJbmRleCBvZiBlZGl0IG1lYWwuXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiBnZXRJbmRleEVkaXRNZWFsKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4RWRpdE1lYWw7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3Rvcnkjc2V0SW5kZXhFZGl0TWVhbFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFNldCBpbmRleCBvZiBlZGl0IG1lYWwuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgZWRpdCBtZWFsLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5kZXhFZGl0TWVhbChpbmRleCkge1xuICAgICAgICAgICAgaW5kZXhFZGl0TWVhbCA9IGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2dldENhcnRMaXN0Q291bnRcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gY291bnQgb2YgZWxlbWVudHMgaW4gY2FydCBsaXN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7bnVtYmVyfSBDYXJ0IGxpc3QgbGVuZ3RoLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FydExpc3RDb3VudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjYWRkTW9kaWZpZXJzVG9MaXN0XHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQWRkIG1vZGlmaWVycyB0byBsaXN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gbW9kaWYgQXJyYXkgd2l0aCBtb2RpZmllcnMgb2JqZWN0cy5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1vZGlmaWVyc1RvTGlzdChtb2RpZikge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gbW9kaWY7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjYWRkTWVhbFRvQ2FydExpc3RcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBBZGQgbWVhbCB0byBjYXJ0IGxpc3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gbWVhbCBNZWFsIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEFtb3VudCBvZiBtZWFsLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gYWRkTWVhbFRvQ2FydExpc3QobWVhbCwgYW1vdW50KSB7XG4gICAgICAgICAgICB2YXIgbmV3TWVhbCA9IHt9O1xuXG4gICAgICAgICAgICBuZXdNZWFsLmlkID0gbWVhbC5pZDtcbiAgICAgICAgICAgIG5ld01lYWwubmFtZSA9IG1lYWwubmFtZTtcbiAgICAgICAgICAgIG5ld01lYWwucHJpY2UgPSBtZWFsLnByaWNlO1xuICAgICAgICAgICAgbmV3TWVhbC5hbW91bnQgPSBhbW91bnQ7XG5cbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICBuZXdNZWFsLm1vZGlmaWVycyA9IG1vZGlmaWVycy5zbGljZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBudWxsO1xuICAgICAgICAgICAgY2FydExpc3QucHVzaChuZXdNZWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5DYXJ0RmFjdG9yeSNnZXRDYXJ0TGlzdFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBjYXJ0IGxpc3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQ2FydCBsaXN0LlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FydExpc3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FydExpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjZ2V0VG90YWxQcmljZVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBjYXJ0IGxpc3QgdG90YWwgcHJpY2UuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IENhcnQgbGlzdCB0b3RhbCBwcmljZS5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGdldFRvdGFsUHJpY2UoKSB7XG4gICAgICAgICAgICB2YXIgdG90YWxQcmljZSA9IDA7XG5cbiAgICAgICAgICAgIGlmIChjYXJ0TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhcnRMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdG90YWxQcmljZSArPSBjYXJ0TGlzdFtpXS5wcmljZSAqIGNhcnRMaXN0W2ldLmFtb3VudDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FydExpc3RbaV0ubW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IGdldE1vZGlmaWVyc1ByaWNlKGNhcnRMaXN0W2ldLm1vZGlmaWVycykgKiBjYXJ0TGlzdFtpXS5hbW91bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0b3RhbFByaWNlLnRvRml4ZWQoMik7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjZGVsZXRlTW9kaWZpZXJzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogUmVzZXQgbW9kaWZpZXJzIHZhbHVlLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlTW9kaWZpZXJzKCkge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5DYXJ0RmFjdG9yeSNyZW1vdmVNZWFsXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogUmVtb3ZlIGVkaXQgbWVhbCBvZiBjYXJ0IGxpc3QuXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiByZW1vdmVNZWFsKCkge1xuICAgICAgICAgICAgY2FydExpc3Quc3BsaWNlKGluZGV4RWRpdE1lYWwsIDEpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmZhY3RvcnkoXCJNZWFsc0ZhY3RvcnlcIiwgTWVhbHNGYWN0b3J5KTtcblxuXHQvKipcclxuICAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAqIEByZXF1aXJlcyAkaHR0cFxyXG4gICogQHJlcXVpcmVzICRxXHJcbiAgKlxyXG4gICogQGRlc2NyaXB0aW9uXHJcbiAgKiBGYWN0b3J5IGdldCBjdXJyZW5jeSwgYXJyYXkgb2YgcHJvZHVjdHMgYW5kIGFycmF5IG9mIGRyaW5rcyxcclxuICAqIGFuZCB3b3JrIHdpdGggY3VycmVudCBtZWFsLlxyXG4gICpcclxuICAqKi9cblx0ZnVuY3Rpb24gTWVhbHNGYWN0b3J5KCRodHRwLCAkcSkge1xuXG5cdFx0dmFyIG1lYWxBcGlVcmwgPSBcIm1lYWxzLmpzb25cIixcblx0XHQgICAgbWVhbHMgPSBudWxsLFxuXHRcdCAgICBjdXJyZW5jeSA9IFwiXCIsXG5cdFx0ICAgIGN1cnJlbnRNZWFsID0gbnVsbCxcblx0XHQgICAgY3VycmVudE1lYWxTdGF0dXMgPSBcIm5ld1wiLFxuXHRcdCAgICBjdXJyZW50QW1vdW50ID0gMSxcblx0XHQgICAgZmFjdG9yeSA9IHtcblx0XHRcdGdldE1vZGlmaWVyczogZ2V0TW9kaWZpZXJzLFxuXHRcdFx0Z2V0TWVhbHM6IGdldE1lYWxzLFxuXHRcdFx0Z2V0Q3VycmVudE1lYWw6IGdldEN1cnJlbnRNZWFsLFxuXHRcdFx0c2V0Q3VycmVudE1lYWw6IHNldEN1cnJlbnRNZWFsLFxuXHRcdFx0Z2V0Q3VycmVudE1lYWxTdGF0dXM6IGdldEN1cnJlbnRNZWFsU3RhdHVzLFxuXHRcdFx0c2V0Q3VycmVudE1lYWxTdGF0dXM6IHNldEN1cnJlbnRNZWFsU3RhdHVzLFxuXHRcdFx0Z2V0Q3VycmVuY3k6IGdldEN1cnJlbmN5LFxuXHRcdFx0Z2V0Q3VycmVudE1lYWxBbW91bnQ6IGdldEN1cnJlbnRNZWFsQW1vdW50LFxuXHRcdFx0c2V0Q3VycmVudE1lYWxBbW91bnQ6IHNldEN1cnJlbnRNZWFsQW1vdW50LFxuXHRcdFx0c2V0Q3VycmVudE1lYWxCeUlkOiBzZXRDdXJyZW50TWVhbEJ5SWQsXG5cdFx0XHRvcGVuTWVhbDogb3Blbk1lYWxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZhY3Rvcnk7XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I29wZW5NZWFsXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU2V0IGN1cnJlbnQgbWVhbCwgY3VycmVudCBtZWFsIHN0YXR1cyBhbmQgY3VycmVudCBtZWFsIGFtb3VudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZWFsICAgQ3VycmVudCBtZWFsLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgTWVhbCBzdGF0dXMoXCJuZXdcIiBvciBcImVkaXRcIikuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBNZWFsIGFtb3VudC5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gb3Blbk1lYWwobWVhbCwgc3RhdHVzLCBhbW91bnQpIHtcblx0XHRcdHNldEN1cnJlbnRNZWFsKG1lYWwpO1xuXHRcdFx0c2V0Q3VycmVudE1lYWxTdGF0dXMoc3RhdHVzKTtcblx0XHRcdHNldEN1cnJlbnRNZWFsQW1vdW50KGFtb3VudCk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNnZXRNZWFsc0Zyb21IdHRwXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIE9idGFpbmluZyBkYXRhIG9uIGZvb2RzIGFuZCBkcmlua3MgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IGRlZmVycmVkIERlZmVycmVkIG9iamVjdC5cclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IERlZmVycmVkIG9iamVjdCB3aXRoIHJlc29sdmUgYW5kIHJlamVjdC5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCkge1xuXG5cdFx0XHQkaHR0cCh7IG1ldGhvZDogXCJHRVRcIiwgdXJsOiBtZWFsQXBpVXJsIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0bWVhbHMgPSBkYXRhO1xuXHRcdFx0XHRjdXJyZW5jeSA9IGRhdGEuY3VycmVuY3k7XG5cblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcblx0XHRcdH0pLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KFwiRXJyb3IgaW4gJGh0dHAgcmVxdWVzdFwiKTtcblxuXHRcdFx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0Y29uc29sZS5sb2coc3RhdHVzKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNnZXRNb2RpZmllcnNcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogSWYgbWVhbHMgaGF2ZSBtb2RpZmllcnMgcmV0dXJuIHRoZW0gZWxzZSByZXR1cm4gZmFsc2VcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge29iamVjdHxib29sZWFufSBDdXJyZW50IG1lYWwgbW9kaWZpZXJzIG9yIGZhbHNlLlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBnZXRNb2RpZmllcnMoKSB7XG5cblx0XHRcdGlmIChjdXJyZW50TWVhbCAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudE1lYWwubW9kaWZpZXJzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0TWVhbHNcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmV0dXJuIHByb21pc2Ugd2l0aCB0aGUgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIG9yXHJcbiAgICogaWYgdGhlIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiwgcmV0dXJuIHByb21pc2Ugd2l0aCB0aGVcclxuICAgKiBtZWFscyBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFByb21pc2UuXHJcbiAgICoqL1xuXHRcdGZ1bmN0aW9uIGdldE1lYWxzKCkge1xuXHRcdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuXHRcdFx0aWYgKCFtZWFscykge1xuXHRcdFx0XHRkZWZlcnJlZCA9IGdldE1lYWxzRnJvbUh0dHAoZGVmZXJyZWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShtZWFscyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHRcdH1cblxuXHRcdC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0Q3VycmVudE1lYWxcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmV0dXJuIGN1cnJlbnQgbWVhbC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge29iamVjdH0gQ3VycmVudCBtZWFsLlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBnZXRDdXJyZW50TWVhbCgpIHtcblx0XHRcdHJldHVybiBjdXJyZW50TWVhbDtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I3NldEN1cnJlbnRNZWFsXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFNldCBjdXJyZW50IG1lYWwuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge29iamVjdH0gbWVhbCBDdXJyZW50IG1lYWwuXHJcbiAgICoqL1xuXHRcdGZ1bmN0aW9uIHNldEN1cnJlbnRNZWFsKG1lYWwpIHtcblx0XHRcdGN1cnJlbnRNZWFsID0gbWVhbDtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I2dldEN1cnJlbnRNZWFsU3RhdHVzXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFJldHVybiBjdXJyZW50IG1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBDdXJyZW50IG1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBnZXRDdXJyZW50TWVhbFN0YXR1cygpIHtcblx0XHRcdHJldHVybiBjdXJyZW50TWVhbFN0YXR1cztcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I3NldEN1cnJlbnRNZWFsU3RhdHVzXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFNldCBjdXJyZW50IG1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cyBDdXJyZW50IG1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbFN0YXR1cyhzdGF0dXMpIHtcblx0XHRcdGN1cnJlbnRNZWFsU3RhdHVzID0gc3RhdHVzO1xuXHRcdH1cblxuXHRcdC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0Q3VycmVuY3lcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmV0dXJuIGN1cnJlbmN5LlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBDdXJyZW5jeS5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVuY3koKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVuY3k7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNnZXRDdXJyZW50TWVhbEFtb3VudFxyXG4gICAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBSZXR1cm4gY3VycmVudCBtZWFsIGFtb3VudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gQ3VycmVudCBtZWFsIGFtb3VudC5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVudE1lYWxBbW91bnQoKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVudEFtb3VudDtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I3NldEN1cnJlbnRNZWFsQW1vdW50XHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFNldCBjdXJyZW50IG1lYWwgYW1vdW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBDdXJyZW50IG1lYWwgYW1vdW50LlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbEFtb3VudChhbW91bnQpIHtcblx0XHRcdGN1cnJlbnRBbW91bnQgPSBhbW91bnQ7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNzZXRDdXJyZW50TWVhbEJ5SWRcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU2V0IGN1cnJlbnQgbWVhbCBieSBpZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJZCBvZiBjdXJyZW50IG1lYWwuXHJcbiAgICoqL1xuXHRcdGZ1bmN0aW9uIHNldEN1cnJlbnRNZWFsQnlJZChpZCkge1xuXG5cdFx0XHRjdXJyZW50TWVhbCA9IG1lYWxzLnByb2R1Y3RzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gaXRlbS5pZCA9PT0gaWQ7XG5cdFx0XHR9KVswXTtcblxuXHRcdFx0aWYgKCFjdXJyZW50TWVhbCkge1xuXHRcdFx0XHRjdXJyZW50TWVhbCA9IG1lYWxzLmRyaW5rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5pZCA9PT0gaWQ7XG5cdFx0XHRcdH0pWzBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5mYWN0b3J5KFwiTW9kaWZpZXJzRmFjdG9yeVwiLCBNb2RpZmllcnNGYWN0b3J5KTtcblxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2VcclxuICAgICAqIEBuYW1lIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAqIEByZXF1aXJlcyBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRmFjdG9yeSB3b3JrIHdpdGggbW9kaWZpZXJzLlxyXG4gICAgICpcclxuICAgICAqKi9cbiAgICBmdW5jdGlvbiBNb2RpZmllcnNGYWN0b3J5KENhcnRGYWN0b3J5KSB7XG5cbiAgICAgICAgdmFyIGZhY3RvcnkgPSB7XG4gICAgICAgICAgICBnZXRDaGVja2VkTW9kaWZpZXJzOiBnZXRDaGVja2VkTW9kaWZpZXJzLFxuICAgICAgICAgICAgbW9kaWZpZXJIYXNCZWVuU2VsZWN0ZWQ6IG1vZGlmaWVySGFzQmVlblNlbGVjdGVkLFxuICAgICAgICAgICAgZGVsZXRlTW9kaWZpZXI6IGRlbGV0ZU1vZGlmaWVyLFxuICAgICAgICAgICAgc2VsZWN0TW9kaWZpZXI6IHNlbGVjdE1vZGlmaWVyLFxuICAgICAgICAgICAgcGlja0NoZWNrZWRNb2RpZmllcnM6IHBpY2tDaGVja2VkTW9kaWZpZXJzXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnkjZ2V0Q2hlY2tlZE1vZGlmaWVyc1xyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5Nb2RpZmllcnNGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogUmV0dXJuIGFycmF5IHdpdGggbW9kaWZpZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7b2JqZWN0W119IEFycmF5IG9mIG1vZGlmaWVycyBvYmplY3RzLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2hlY2tlZE1vZGlmaWVycygpIHtcbiAgICAgICAgICAgIHZhciBjYXJ0TGlzdCA9IENhcnRGYWN0b3J5LmdldENhcnRMaXN0KClbQ2FydEZhY3RvcnkuZ2V0SW5kZXhFZGl0TWVhbCgpXTtcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdC5tb2RpZmllcnM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeSNtb2RpZmllckhhc0JlZW5TZWxlY3RlZFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5Nb2RpZmllcnNGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogUmV0dXJuIHRydWUgaWYgbW9kaWZpZXIgaGFzIGJlZW4gc2VsZWN0ZWQsIG9yIGZhbHNlIGlmIG5vLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gc2VsZWN0ZWRNb2RpZmllcnMgQXJyYXkgd2l0aCBzZWxlY3RlZCBtb2RpZmllcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1vZGlmaWVyIE1vZGlmaWVyIG9iamVjdC5cclxuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vZGlmaWVyIGhhcyBiZWVuIHNlbGVjdGVkLCBlbHNlIGZhbHNlLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gbW9kaWZpZXJIYXNCZWVuU2VsZWN0ZWQoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RpZmllcnMuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSBpdGVtLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I2RlbGV0ZU1vZGlmaWVyXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBEZWxldGUgbW9kaWZpZXIgYXQgYXJyYXkgc2VsZWN0ZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gc2VsZWN0ZWRNb2RpZmllcnMgQXJyYXkgd2l0aCBzZWxlY3RlZCBtb2RpZmllcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1vZGlmaWVyIE1vZGlmaWVyIG9iamVjdCB3aG8gYmUgZGVsZXRlZC5cclxuICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gTmV3IGFycmF5IG9mIG1vZGlmaWVycy5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2RpZmllci5uYW1lICE9PSBpdGVtLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I3NlbGVjdE1vZGlmaWVyXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBBZGQgbW9kaWZpZXIgaWYgaXQgbm90IGhhcyBiZWVuIHNlbGVjdGVkLCBlbHNlIGRlbGV0ZSBtb2RpZmllciBhdFxyXG4gICAgICAgICAqIGFycmF5IG9mIHNlbGVjdGVkIG1vZGlmaWVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0W119IHNlbGVjdGVkTW9kaWZpZXJzIEFycmF5IHdpdGggc2VsZWN0ZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtb2RpZmllciBNb2RpZmllciBvYmplY3QuXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiBzZWxlY3RNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpIHtcblxuICAgICAgICAgICAgaWYgKCFtb2RpZmllckhhc0JlZW5TZWxlY3RlZChzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkTW9kaWZpZXJzID0gZGVsZXRlTW9kaWZpZXIoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ2FydEZhY3RvcnkuYWRkTW9kaWZpZXJzVG9MaXN0KHNlbGVjdGVkTW9kaWZpZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I3BpY2tDaGVja2VkTW9kaWZpZXJzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBQaWNrIGFsbCBjaGVja2VkIG1vZGlmaWVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0W119IG1vZGlmaWVycyBBbGwgbW9kaWZpZXJzIG9mIGN1cnJlbnQgbWVhbC5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBzZWxlY3RlZE1vZGlmaWVycyBBcnJheSB3aGVyZSB3aWxsIGJlIHBsYWNlZCBtb2RpZmllcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gY2hlY2tlZE1vZGlmaWVycyBBcnJheSB3aXRoIGNoZWNrZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gcGlja0NoZWNrZWRNb2RpZmllcnMobW9kaWZpZXJzLCBzZWxlY3RlZE1vZGlmaWVycywgY2hlY2tlZE1vZGlmaWVycykge1xuXG4gICAgICAgICAgICBpZiAoY2hlY2tlZE1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5DaGVja2VkTW9kaWZpZXJzID0gY2hlY2tlZE1vZGlmaWVycy5sZW5ndGg7IGkgPCBsZW5DaGVja2VkTW9kaWZpZXJzOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuTW9kaWZpZXJzID0gbW9kaWZpZXJzLmxlbmd0aDsgaiA8IGxlbk1vZGlmaWVyczsgaisrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllcnNbal0ubmFtZSA9PT0gY2hlY2tlZE1vZGlmaWVyc1tpXS5uYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnNbal0uY2hlY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcnNbal0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmFwcFBhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgYXBwLlxyXG4gICAgICpcclxuICAgICAqIEB1c2FnZSA8YXBwLXBhZ2U+PC9hcHAtcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwiYXBwUGFnZVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvYXBwL3RlbXBsYXRlL2FwcFBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJhcHBcIixcbiAgICAgICAgY29udHJvbGxlcjogQXBwQ29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpBcHBDb250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcImFwcFBhZ2VcIi5cclxuICAgICAqKi9cbiAgICBmdW5jdGlvbiBBcHBDb250cm9sbGVyKCkge31cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIilcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTpjYXJ0UGFnZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBjYXJ0IHBhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogQHVzYWdlIDxjYXJ0LXBhZ2U+PC9jYXJ0LXBhZ2U+XHJcbiAgICAgKiovXG4gICAgLmNvbXBvbmVudChcImNhcnRQYWdlXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9jYXJ0L3RlbXBsYXRlL2NhcnRQYWdlLmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6IFwiY2FydFwiLFxuICAgICAgICBjb250cm9sbGVyOiBDYXJ0Q29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpDYXJ0Q29udHJvbGxlclxyXG4gICAgICogQHJlcXVpcmVzIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAgICogQHJlcXVpcmVzIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVuY3kgQ3VycmVuY3kuXHJcbiAgICAgKiBAcHJvcGVydHkge29iamVjdFtdfSAgY2FydExpc3QgQXJyYXkgb2Ygc2VsZWN0IG1lYWxzIGFuZCBkcmlua3MuXHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdG90YWxQcmljZSBUb3RhbCBwcmljZS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwiY2FydFBhZ2VcIi5cclxuICAgICAqIERpc3BsYXkgdXNlci1zZWxlY3RlZCBtZWFscyBhbmQgZHJpbmtzIGFuZCB0aGVpciB0b3RhbCBwcmljZS5cclxuICAgICAqIFByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIGVkaXQgdGhlaXIgY2hvaWNlLlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIENhcnRDb250cm9sbGVyKE1lYWxzRmFjdG9yeSwgQ2FydEZhY3RvcnkpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLmN1cnJlbmN5ID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbmN5KCk7XG4gICAgICAgIHZtLmNhcnRMaXN0ID0gQ2FydEZhY3RvcnkuZ2V0Q2FydExpc3QoKTtcbiAgICAgICAgdm0udG90YWxQcmljZSA9IENhcnRGYWN0b3J5LmdldFRvdGFsUHJpY2UoKTtcbiAgICAgICAgdm0uZWRpdE1lYWwgPSBlZGl0TWVhbDtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpDYXJ0Q29udHJvbGxlciNlZGl0TWVhbFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOkNhcnRDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogT3BlbiBtZWFsIGZvciBlZGl0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1lYWwgTWVhbCBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEN1cnJlbnQgbWVhbCBpbmRleC5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGVkaXRNZWFsKG1lYWwsIGluZGV4KSB7XG4gICAgICAgICAgICBDYXJ0RmFjdG9yeS5zZXRJbmRleEVkaXRNZWFsKGluZGV4KTtcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5zZXRDdXJyZW50TWVhbEJ5SWQobWVhbC5pZCk7XG4gICAgICAgICAgICBNZWFsc0ZhY3Rvcnkuc2V0Q3VycmVudE1lYWxBbW91bnQobWVhbC5hbW91bnQpO1xuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LnNldEN1cnJlbnRNZWFsU3RhdHVzKFwiZWRpdFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIilcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTpjYXJ0SWNvblBhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgY2FydCBidXR0b24gYW5kIHN0cmluZyB3aXRoIG1lYWxzIGNvdW50LlxyXG4gICAgICogQWNjZXB0cyBmcm9tIHBhcmVudCBjb250cm9sbGVyIGNvdW50IG1lYWxzIGluIGNhcnQgaW4gdmFyaWFibGUgXCJjb3VudFwiLlxyXG4gICAgICpcclxuICAgICAqIEB1c2FnZSA8Y2FydC1pY29uLXBhZ2U+PC9jYXJ0LWljb24tcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwiY2FydEljb25QYWdlXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9jYXJ0SWNvbi90ZW1wbGF0ZS9jYXJ0SWNvblBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge1xuICAgICAgICAgICAgY291bnQ6IFwiQFwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjYXJ0SWNvblwiLFxuICAgICAgICBjb250cm9sbGVyOiBDYXJ0SWNvbkNvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6Q2FydEljb25Db250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcImNhcnRJY29uUGFnZVwiLlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIENhcnRJY29uQ29udHJvbGxlcigpIHt9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgKiBAbmFtZSBNZWFscy5kaXJlY3RpdmU6ZHJpbmtzTGlzdFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBsaXN0IG9mIGRyaW5rcy5cclxuICAgICAqXHJcbiAgICAgKiBAdXNhZ2UgPGRyaW5rcy1saXN0PjwvZHJpbmtzLWxpc3Q+XHJcbiAgICAgKiovXG4gICAgLmNvbXBvbmVudChcImRyaW5rc0xpc3RcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2RyaW5rc0xpc3QvdGVtcGxhdGUvZHJpbmtzTGlzdC5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImRyaW5rc0xpc3RcIixcbiAgICAgICAgY29udHJvbGxlcjogRHJpbmtzTGlzdENvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAqIEByZXF1aXJlcyBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeSBDdXJyZW5jeS5cclxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb25seVNvZnREcmlua3MgVmFyaWFibGUgaW5kaWNhdGluZyBzZWxlY3Qgb25seSBzb2Z0IGRyaW5rIG9yIG5vLlxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJkcmlua3NMaXN0XCIuXHJcbiAgICAgKiBIYW5kbGUgYSB1c2VyIGNob2ljZSBhYm91dCBkcmluay5cclxuICAgICAqKi9cbiAgICBmdW5jdGlvbiBEcmlua3NMaXN0Q29udHJvbGxlcihNZWFsc0ZhY3RvcnkpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLmRyaW5rcyA9IFtdO1xuICAgICAgICB2bS5vbmx5U29mdERyaW5rcyA9IGZhbHNlO1xuICAgICAgICB2bS5jdXJyZW5jeSA9IFwiXCI7XG4gICAgICAgIHZtLm9wZW5EcmluayA9IG9wZW5EcmluaztcbiAgICAgICAgdm0uZ2V0RHJpbmtzRm9yVmlldyA9IGdldERyaW5rc0ZvclZpZXc7XG5cbiAgICAgICAgYWN0aXZhdGUoKTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpEcmlua3NMaXN0Q29udHJvbGxlciNhY3RpdmF0ZVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogTWV0aG9kIHRvIGluaXRpYWxpemUgZGF0YS5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LmdldE1lYWxzKCkudGhlbihnZXREcmlua3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXIjZ2V0RHJpbmtzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBBc3NpZ25pbmcgYSBkYXRhIGF0IHByb3BlcnRpZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZHJpbmtzT2JqIERyaW5rcyBvYmplY3QgY29udGFpbnMgY3VycmVuY3kgYW5kIGRyaW5rcyBhcnJheS5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGdldERyaW5rcyhkcmlua3NPYmopIHtcbiAgICAgICAgICAgIHZtLmN1cnJlbmN5ID0gZHJpbmtzT2JqLmN1cnJlbmN5O1xuICAgICAgICAgICAgdm0uZHJpbmtzID0gZHJpbmtzT2JqLmRyaW5rcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyI29wZW5Ecmlua1xyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ2FsbCBtZXRob2Qgb3Blbk1lYWwgb3duZWQgTWVhbHNGYWN0b3J5LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRyaW5rIERyaW5rIG9iamVjdC5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5Ecmluayhkcmluaykge1xuICAgICAgICAgICAgTWVhbHNGYWN0b3J5Lm9wZW5NZWFsKGRyaW5rLCBcIm5ld1wiLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyI2dldERyaW5rc0ZvclZpZXdcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpEcmlua3NMaXN0Q29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBhbGwgZHJpbmtzIG9yIG9ubHkgc29mdCBkcmlua3MuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQXJyYXkgb2YgZHJpbmtzLlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0RHJpbmtzRm9yVmlldygpIHtcblxuICAgICAgICAgICAgaWYgKHZtLm9ubHlTb2Z0RHJpbmtzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmRyaW5rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udGlwcGxlICE9PSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm0uZHJpbmtzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmVycm9yUGFnZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSBvZiBlcnJvciBwYWdlLlxyXG4gICAgICpcclxuICAgICAqIEB1c2FnZSA8ZXJyb3ItcGFnZT48L2Vycm9yLXBhZ2U+XHJcbiAgICAgKiovXG4gICAgLmNvbXBvbmVudChcImVycm9yUGFnZVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvZXJyb3IvdGVtcGxhdGUvZXJyb3JQYWdlLmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6IFwiZXJyb3JcIixcbiAgICAgICAgY29udHJvbGxlcjogRXJyb3JDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkVycm9yQ29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJlcnJvclBhZ2VcIi5cclxuICAgICAqKi9cbiAgICBmdW5jdGlvbiBFcnJvckNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmZvb3RlclBhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdG8gZm9vdGVyIHNlY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHVzYWdlIDxmb290ZXItcGFnZT48L2Zvb3Rlci1wYWdlPlxyXG4gICAgICoqL1xuICAgIC5jb21wb25lbnQoXCJmb290ZXJQYWdlXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9mb290ZXIvdGVtcGxhdGUvZm9vdGVyUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImZvb3RlclwiLFxuICAgICAgICBjb250cm9sbGVyOiBGb290ZXJDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkZvb3RlckNvbnRyb2xsZXJcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwiZm9vdGVyUGFnZVwiLlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIEZvb3RlckNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmhlYWRlclBhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdG8gaGVhZGVyIHNlY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHVzYWdlIDxoZWFkZXItcGFnZT48L2hlYWRlci1wYWdlPlxyXG4gICAgICoqL1xuICAgIC5jb21wb25lbnQoXCJoZWFkZXJQYWdlXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9oZWFkZXIvdGVtcGxhdGUvaGVhZGVyUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImhlYWRlclwiLFxuICAgICAgICBjb250cm9sbGVyOiBIZWFkZXJDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkhlYWRlckNvbnRyb2xsZXJcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwiaGVhZGVyUGFnZVwiLlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmxvZ29QYWdlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGxvZ28gc2VjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAdXNhZ2UgPGxvZ28tcGFnZT48L2xvZ28tcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwibG9nb1BhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2xvZ28vdGVtcGxhdGUvbG9nb1BhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJsb2dvXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IExvZ29Db250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkxvZ29Db250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcImxvZ29QYWdlXCIuXHJcbiAgICAgKiovXG4gICAgZnVuY3Rpb24gTG9nb0NvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1haW5QYWdlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIG1haW4gc2VjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAdXNhZ2UgPG1haW4tcGFnZT48L21haW4tcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwibWFpblBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21haW4vdGVtcGxhdGUvbWFpblBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJtYWluXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IE1haW5Db250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1haW5Db250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcIm1haW5QYWdlXCIuXHJcbiAgICAgKiovXG4gICAgZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpXG5cdC8qKlxyXG4gICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1lYWxQYWdlXHJcbiAgKlxyXG4gICogQGRlc2NyaXB0aW9uXHJcbiAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIG9mIG1lYWwuXHJcbiAgKiBBY2NlcHRzIGZyb20gcGFyZW50IGNvbnRyb2xsZXIgcGF0aCB3aGVyZSB0aGUgdXNlciBjYW1lIGluIHZhcmlhYmxlIFwicGF0aFwiLlxyXG4gICpcclxuICAqIEB1c2FnZSA8bWVhbC1wYWdlPjwvbWVhbC1wYWdlPlxyXG4gICoqL1xuXHQuY29tcG9uZW50KFwibWVhbFBhZ2VcIiwge1xuXHRcdHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbWVhbC90ZW1wbGF0ZS9tZWFsUGFnZS5odG1sXCIsXG5cdFx0YmluZGluZ3M6IHtcblx0XHRcdHBhdGg6IFwiQFwiXG5cdFx0fSxcblx0XHRjb250cm9sbGVyQXM6IFwibWVhbFwiLFxuXHRcdGNvbnRyb2xsZXI6IE1lYWxDb250cm9sbGVyXG5cdH0pO1xuXG5cdC8qKlxyXG4gICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXJcclxuICAqIEByZXF1aXJlcyBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAqIEByZXF1aXJlcyBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICogQHByb3BlcnR5IHtvYmplY3R9IGN1cnJlbnRNZWFsIEN1cnJlbnQgbWVhbC5cclxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeSBDdXJyZW5jeS5cclxuICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZWxlY3RBbW91bnQgQ3VycmVudCBtZWFsIHNlbGVjdCBhbW91bnQuXHJcbiAgKiBAcHJvcGVydHkge3N0cmluZ30gbWVhbFN0YXR1cyBDdXJyZW50IG1lYWwgc3RhdHVzLlxyXG4gICogQHByb3BlcnR5IHtudW1iZXJ9IGNhcnRDb3VudCBDb3VudCBtZWFsIGluIGNhcnQuXHJcbiAgKlxyXG4gICogQGRlc2NyaXB0aW9uXHJcbiAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcIm1lYWxQYWdlXCIuXHJcbiAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gYWRkIG1lYWwgdG8gY2FydCwgZGVsZXRlIG1lYWwsIGVkaXQgbWVhbCBhbmQgZXRjLlxyXG4gICoqL1xuXHRmdW5jdGlvbiBNZWFsQ29udHJvbGxlcihNZWFsc0ZhY3RvcnksIENhcnRGYWN0b3J5KSB7XG5cblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0dm0uY3VycmVudE1lYWwgPSBNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWwoKTtcblx0XHR2bS5jdXJyZW5jeSA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW5jeSgpO1xuXHRcdHZtLnNlbGVjdEFtb3VudCA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbEFtb3VudCgpO1xuXHRcdHZtLm1lYWxTdGF0dXMgPSBNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWxTdGF0dXMoKTtcblx0XHR2bS5jYXJ0Q291bnQgPSBDYXJ0RmFjdG9yeS5nZXRDYXJ0TGlzdENvdW50KCk7XG5cdFx0dm0uYWRkTWVhbCA9IGFkZE1lYWw7XG5cdFx0dm0ucmVtb3ZlTWVhbCA9IHJlbW92ZU1lYWw7XG5cdFx0dm0uc2F2ZU1lYWwgPSBzYXZlTWVhbDtcblxuXHRcdC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lYWxDb250cm9sbGVyI2FkZE1lYWxcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNZWFsQ29udHJvbGxlclxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENhbGwgbWV0aG9kIGFkZE1lYWxUb0NhcnRMaXN0IG93bmVkIENhcnRGYWN0b3J5LlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBhZGRNZWFsKCkge1xuXHRcdFx0Q2FydEZhY3RvcnkuYWRkTWVhbFRvQ2FydExpc3Qodm0uY3VycmVudE1lYWwsIHZtLnNlbGVjdEFtb3VudCk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXIjcmVtb3ZlTWVhbFxyXG4gICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOk1lYWxDb250cm9sbGVyXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQ2FsbCBtZXRob2QgcmVtb3ZlTWVhbCBvd25lZCBDYXJ0RmFjdG9yeVxyXG4gICAqIGFuZCBtZXRob2QgZGVsZXRlTW9kaWZpZXJzIG93bmVkIENhcnRGYWN0b3J5LlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiByZW1vdmVNZWFsKCkge1xuXHRcdFx0Q2FydEZhY3RvcnkucmVtb3ZlTWVhbCgpO1xuXHRcdFx0Q2FydEZhY3RvcnkuZGVsZXRlTW9kaWZpZXJzKCk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXIjc2F2ZU1lYWxcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNZWFsQ29udHJvbGxlclxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENhbGwgbWV0aG9kIHJlbW92ZU1lYWwgb3duZWQgQ2FydEZhY3RvcnlcclxuICAgKiBhbmQgbWV0aG9kIGFkZE1lYWxUb0NhcnRMaXN0IG93bmVkIENhcnRGYWN0b3J5LlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBzYXZlTWVhbCgpIHtcblx0XHRcdENhcnRGYWN0b3J5LnJlbW92ZU1lYWwoKTtcblx0XHRcdHZtLmFkZE1lYWwoKTtcblx0XHR9XG5cdH1cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0YW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuXHQvKipcclxuICAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTptZWFsc0xpc3RcclxuICAqXHJcbiAgKiBAZGVzY3JpcHRpb25cclxuICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdG8gbGlzdCBvZiBtZWFscy5cclxuICAqXHJcbiAgKiBAdXNhZ2UgPG1lYWxzLWxpc3Q+PC9tZWFscy1saXN0PlxyXG4gICoqL1xuXHQuY29tcG9uZW50KFwibWVhbHNMaXN0XCIsIHtcblx0XHR0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lYWxzTGlzdC90ZW1wbGF0ZS9tZWFsc0xpc3QuaHRtbFwiLFxuXHRcdGJpbmRpbmdzOiB7fSxcblx0XHRjb250cm9sbGVyQXM6IFwibWVhbHNMaXN0XCIsXG5cdFx0Y29udHJvbGxlcjogTWVhbHNMaXN0Q29udHJvbGxlclxuXHR9KTtcblxuXHQvKipcclxuICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lYWxzTGlzdENvbnRyb2xsZXJcclxuICAqIEByZXF1aXJlcyBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW5jeSBDdXJyZW5jeS5cclxuICAqIEBwcm9wZXJ0eSB7b2JqZWN0W119IHByb2R1Y3RzIEFycmF5IG9mIHByb2R1Y3RzLlxyXG4gICpcclxuICAqIEBkZXNjcmlwdGlvblxyXG4gICogQ29udHJvbGxlciBjb21wb25lbnQgXCJtZWFsc0xpc3RcIi5cclxuICAqIEhhbmRsZSBhIHVzZXIgY2hvaWNlIGFib3V0IG1lYWwuXHJcbiAgKiovXG5cdGZ1bmN0aW9uIE1lYWxzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XG5cblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0dm0ub3Blbk1lYWwgPSBvcGVuTWVhbDtcblx0XHR2bS5jdXJyZW5jeSA9IFwiXCI7XG5cdFx0dm0ucHJvZHVjdHMgPSBudWxsO1xuXG5cdFx0YWN0aXZhdGUoKTtcblxuXHRcdC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lYWxzTGlzdENvbnRyb2xsZXIjYWN0aXZhdGVcclxuICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNZWFsc0xpc3RDb250cm9sbGVyXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogTWV0aG9kIHRvIGluaXRpYWxpemUgZGF0YS5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG5cdFx0XHRNZWFsc0ZhY3RvcnkuZ2V0TWVhbHMoKS50aGVuKGdldFByb2R1Y3RzKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNZWFsc0xpc3RDb250cm9sbGVyI2dldFByb2R1Y3RzXHJcbiAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TWVhbHNMaXN0Q29udHJvbGxlclxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEFzc2lnbmluZyBhIGRhdGEgYXQgcHJvcGVydGllcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZWFsc09iaiBNZWFscyBvYmplY3QgY29udGFpbnMgY3VycmVuY3kgYW5kIHByb2R1Y3RzIGFycmF5LlxyXG4gICAqKi9cblx0XHRmdW5jdGlvbiBnZXRQcm9kdWN0cyhtZWFsc09iaikge1xuXHRcdFx0dm0uY3VycmVuY3kgPSBtZWFsc09iai5jdXJyZW5jeTtcblx0XHRcdHZtLnByb2R1Y3RzID0gbWVhbHNPYmoucHJvZHVjdHM7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbHNMaXN0Q29udHJvbGxlciNvcGVuTWVhbFxyXG4gICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOk1lYWxzTGlzdENvbnRyb2xsZXJcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBDYWxsIG1ldGhvZCBvcGVuTWVhbCBvd25lZCBNZWFsc0ZhY3RvcnkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge29iamVjdH0gbWVhbCBNZWFsIG9iamVjdC5cclxuICAgKiovXG5cdFx0ZnVuY3Rpb24gb3Blbk1lYWwobWVhbCkge1xuXHRcdFx0TWVhbHNGYWN0b3J5Lm9wZW5NZWFsKG1lYWwsIFwibmV3XCIsIDEpO1xuXHRcdH1cblx0fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1lbnVQYWdlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIG1lbnUgc2VjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAdXNhZ2UgPG1lbnUtcGFnZT48L21lbnUtcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwibWVudVBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lbnUvdGVtcGxhdGUvbWVudVBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJtZW51XCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IE1lbnVDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lbnVDb250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcIm1lbnVQYWdlXCIuXHJcbiAgICAgKiovXG4gICAgZnVuY3Rpb24gTWVudUNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1vZGlmaWVyc1BhZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgbW9kaWZpZXJzIHNlY3Rpb24uXHJcbiAgICAgKiBBY2NlcHRzIGZyb20gcGFyZW50IGNvbnRyb2xsZXIgY3VycmVuY3kgaW4gdmFyaWFibGUgXCJjdXJyZW5jeVwiLlxyXG4gICAgICpcclxuICAgICAqIEB1c2FnZSA8bW9kaWZpZXJzLXBhZ2U+PC9tb2RpZmllcnMtcGFnZT5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwibW9kaWZpZXJzUGFnZVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbW9kaWZpZXJzL3RlbXBsYXRlL21vZGlmaWVyc1BhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge1xuICAgICAgICAgICAgY3VycmVuY3k6IFwiQFwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJtb2RcIixcbiAgICAgICAgY29udHJvbGxlcjogTW9kaWZpZXJzQ29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNb2RpZmllcnNDb250cm9sbGVyXHJcbiAgICAgKiBAcmVxdWlyZXMgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICAgKiBAcmVxdWlyZXMgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeVxyXG4gICAgICogQHByb3BlcnR5IHtvYmplY3RbXX0gbW9kaWZpZXJzIEFycmF5IG9mIG1vZGlmaWVycy5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwibW9kaWZpZXJzUGFnZVwiLlxyXG4gICAgICogSGFuZGxlIGEgdXNlciBjaG9pY2UgYWJvdXQgbW9kaWZpZXJzLlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIE1vZGlmaWVyc0NvbnRyb2xsZXIoTWVhbHNGYWN0b3J5LCBNb2RpZmllcnNGYWN0b3J5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdmFyIHNlbGVjdGVkTW9kaWZpZXJzID0gW107XG5cbiAgICAgICAgdm0ubW9kaWZpZXJzID0gTWVhbHNGYWN0b3J5LmdldE1vZGlmaWVycygpO1xuICAgICAgICB2bS5zZWxlY3RNb2RpZmllciA9IHNlbGVjdE1vZGlmaWVyO1xuICAgICAgICB2bS5jbGVhblBpY2tNb2RpZmllcnMgPSBjbGVhblBpY2tNb2RpZmllcnM7XG5cbiAgICAgICAgdm0uY2xlYW5QaWNrTW9kaWZpZXJzKCk7XG5cbiAgICAgICAgaWYgKE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbFN0YXR1cygpID09PSBcImVkaXRcIikge1xuICAgICAgICAgICAgLy9QaWNrIGNoZWNrYm94ZXMgZm9yIHNlbGVjdCBtb2RpZmllcnNcbiAgICAgICAgICAgIHZhciBjaGVja2VkTW9kaWZpZXJzID0gTW9kaWZpZXJzRmFjdG9yeS5nZXRDaGVja2VkTW9kaWZpZXJzKCk7XG4gICAgICAgICAgICBNb2RpZmllcnNGYWN0b3J5LnBpY2tDaGVja2VkTW9kaWZpZXJzKHZtLm1vZGlmaWVycywgc2VsZWN0ZWRNb2RpZmllcnMsIGNoZWNrZWRNb2RpZmllcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TW9kaWZpZXJzQ29udHJvbGxlciNjbGVhblBpY2tNb2RpZmllcnNcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNb2RpZmllcnNDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ2xlYW4gcGljayBtb2RpZmllcnMgY2hlY2tib3guXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiBjbGVhblBpY2tNb2RpZmllcnMoKSB7XG4gICAgICAgICAgICBpZiAodm0ubW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgdm0ubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY2hlY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1vZGlmaWVyc0NvbnRyb2xsZXIjc2VsZWN0TW9kaWZpZXJcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNb2RpZmllcnNDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ2FsbCBtZXRob2Qgc2VsZWN0TW9kaWZpZXIgb3duZWQgTW9kaWZpZXJzRmFjdG9yeS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtb2RpZmllciBNb2RpZmllciBvYmplY3QuXHJcbiAgICAgICAgICoqL1xuICAgICAgICBmdW5jdGlvbiBzZWxlY3RNb2RpZmllcihtb2RpZmllcikge1xuICAgICAgICAgICAgTW9kaWZpZXJzRmFjdG9yeS5zZWxlY3RNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKVxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOnNlbGVjdENvdW50XHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIHNlbGVjdCBhbW91bnQgb2YgbWVhbC5cclxuICAgICAqIFRyYW5zZmVycyB0byB0aGUgcGFyZW50IGNvbnRyb2xsZXIgc2VsZWN0ZWQgYW1vdW50IG9mIG1lYWwgaW4gdmFyaWFibGUgXCJzZWxlY3RcIi5cclxuICAgICAqXHJcbiAgICAgKiBAdXNhZ2UgPHNlbGVjdC1jb3VudD48L3NlbGVjdC1jb3VudD5cclxuICAgICAqKi9cbiAgICAuY29tcG9uZW50KFwic2VsZWN0Q291bnRcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL3NlbGVjdENvdW50L3RlbXBsYXRlL3NlbGVjdENvdW50UGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IFwiPVwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJzZWxlY3RcIixcbiAgICAgICAgY29udHJvbGxlcjogU2VsZWN0Q291bnRDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOlNlbGVjdENvdW50Q29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJzZWxlY3RDb3VudFwiLlxyXG4gICAgICogQ2FwdHVyZXMgdGhlIHVzZXIncyBjaG9pY2UgYXQgYW1vdW50LlxyXG4gICAgICoqL1xuICAgIGZ1bmN0aW9uIFNlbGVjdENvdW50Q29udHJvbGxlcigpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLnNlbGVjdE51bSA9IHNlbGVjdE51bTtcbiAgICAgICAgdm0uYWN0aXZlTnVtID0gYWN0aXZlTnVtO1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOlNlbGVjdENvdW50Q29udHJvbGxlciNzZWxlY3ROdW1cclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpTZWxlY3RDb3VudENvbnRyb2xsZXJcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBTZWxlY3QgbWVhbCBhbW91bnQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtIE1lYWwgYW1vdW50LlxyXG4gICAgICAgICAqKi9cbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0TnVtKG51bSkge1xuICAgICAgICAgICAgdm0uc2VsZWN0ID0gbnVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6U2VsZWN0Q291bnRDb250cm9sbGVyI2FjdGl2ZU51bVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOlNlbGVjdENvdW50Q29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHZhcmlhYmxlIHNlbGVjdCBpcyBudW0sIGVsc2UgZmFsc2UuXHJcbiAgICAgICAgICogSWYgZnVuY3Rpb24gcmV0dXJuIHRydWUsIHRoZSBidXR0b24gd2l0aCBudW0gZ2V0IGNsYXNzIFwiYWN0aXZlXCIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtIE1lYWwgYW1vdW50LlxyXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgc2VsZWN0IGlzIG51bS5cclxuICAgICAgICAgKiovXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2ZU51bShudW0pIHtcbiAgICAgICAgICAgIHJldHVybiB2bS5zZWxlY3QgPT09IG51bTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiLCBbXHJcbiAgICAgICAgICAgIFwidWkucm91dGVyXCJcclxuICAgICAgICBdKTtcclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLmNvbmZpZyhjb25maWcpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAuc3RhdGUoXCJhcHBcIiwge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9hcHBcIixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxhcHAtcGFnZT48L2FwcC1wYWdlPlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZShcImFwcC5tYWluXCIsIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvbWFpblwiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPG1haW4tcGFnZT48L21haW4tcGFnZT5cIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoXCJhcHAubWFpbi5tZWFsc1wiLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiL21lYWxzXCIsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bWVhbHMtbGlzdCBpZD0nbWVhbHNMaXN0Jz48L21lYWxzLWxpc3Q+XCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKFwiYXBwLm1haW4uZHJpbmtzXCIsIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvZHJpbmtzXCIsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZHJpbmtzLWxpc3Q+PC9kcmlua3MtbGlzdD5cIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoXCJhcHAubWVhbFwiLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiL21lYWwvOnBhdGhcIixcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJtZWFsXCIsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBNZWFsQ29udHJvbGxlcixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxtZWFsLXBhZ2UgaWQ9J21lYWwnIHBhdGg9J3t7IG1lYWwucGF0aCB9fSc+PC9tZWFsLXBhZ2U+XCIsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZShcImFwcC5jYXJ0XCIsIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvY2FydFwiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGNhcnQtcGFnZSBpZD0nY2FydCc+PC9jYXJ0LXBhZ2U+XCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKFwiZXJyb3JcIiwge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9lcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGVycm9yLXBhZ2U+PC9lcnJvci1wYWdlPlwiXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2FwcC9tYWluL21lYWxzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE1lYWxDb250cm9sbGVyKCRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucGF0aCA9ICRzdGF0ZVBhcmFtcy5wYXRoO1xyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuZmFjdG9yeShcIkNhcnRGYWN0b3J5XCIsIENhcnRGYWN0b3J5KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAgICAgKiBAbmFtZSBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRmFjdG9yeSB3b3JrIHdpdGggY2FydC5cclxuICAgICAqXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBDYXJ0RmFjdG9yeSgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNhcnRMaXN0ICAgICAgICAgID0gW10sXHJcbiAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgID0gbnVsbCxcclxuICAgICAgICAgICAgaW5kZXhFZGl0TWVhbCAgICAgPSAwLFxyXG5cclxuICAgICAgICAgICAgZmFjdG9yeSA9IHtcclxuICAgICAgICAgICAgICAgIGdldEluZGV4RWRpdE1lYWwgICA6IGdldEluZGV4RWRpdE1lYWwsXHJcbiAgICAgICAgICAgICAgICBzZXRJbmRleEVkaXRNZWFsICAgOiBzZXRJbmRleEVkaXRNZWFsLFxyXG4gICAgICAgICAgICAgICAgZ2V0Q2FydExpc3RDb3VudCAgIDogZ2V0Q2FydExpc3RDb3VudCxcclxuICAgICAgICAgICAgICAgIGFkZE1vZGlmaWVyc1RvTGlzdCA6IGFkZE1vZGlmaWVyc1RvTGlzdCxcclxuICAgICAgICAgICAgICAgIGFkZE1lYWxUb0NhcnRMaXN0ICA6IGFkZE1lYWxUb0NhcnRMaXN0LFxyXG4gICAgICAgICAgICAgICAgZ2V0Q2FydExpc3QgICAgICAgIDogZ2V0Q2FydExpc3QsXHJcbiAgICAgICAgICAgICAgICBnZXRUb3RhbFByaWNlICAgICAgOiBnZXRUb3RhbFByaWNlLFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlTW9kaWZpZXJzICAgIDogZGVsZXRlTW9kaWZpZXJzLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTWVhbCAgICAgICAgIDogcmVtb3ZlTWVhbCxcclxuICAgICAgICAgICAgICAgIGdldE1vZGlmaWVyc1ByaWNlICA6IGdldE1vZGlmaWVyc1ByaWNlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBmYWN0b3J5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjZ2V0TW9kaWZpZXJzUHJpY2VcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gdG90YWwgcHJpY2Ugb2YgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gbW9kaWZpZXJzQXJyIEFycmF5IG9mIG1vZGlmaWVycyBvYmplY3RzLlxyXG4gICAgICAgICAqIEByZXR1cm4ge251bWJlcn0gVG90YWwgcHJpY2UuXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVyc1ByaWNlKG1vZGlmaWVyc0Fycikge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxQcmljZSA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBtb2RpZmllciBvZiBtb2RpZmllcnNBcnIpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsUHJpY2UgKz0gbW9kaWZpZXIucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0b3RhbFByaWNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2dldEluZGV4RWRpdE1lYWxcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gaW5kZXggZm8gZWRpdCBtZWFsLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7bnVtYmVyfSBJbmRleCBvZiBlZGl0IG1lYWwuXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEluZGV4RWRpdE1lYWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleEVkaXRNZWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I3NldEluZGV4RWRpdE1lYWxcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBTZXQgaW5kZXggb2YgZWRpdCBtZWFsLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IG9mIGVkaXQgbWVhbC5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0SW5kZXhFZGl0TWVhbChpbmRleCkge1xyXG4gICAgICAgICAgICBpbmRleEVkaXRNZWFsID0gaW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjZ2V0Q2FydExpc3RDb3VudFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBjb3VudCBvZiBlbGVtZW50cyBpbiBjYXJ0IGxpc3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IENhcnQgbGlzdCBsZW5ndGguXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcnRMaXN0Q291bnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuQ2FydEZhY3RvcnkjYWRkTW9kaWZpZXJzVG9MaXN0XHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQWRkIG1vZGlmaWVycyB0byBsaXN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gbW9kaWYgQXJyYXkgd2l0aCBtb2RpZmllcnMgb2JqZWN0cy5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTW9kaWZpZXJzVG9MaXN0KG1vZGlmKSB7XHJcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IG1vZGlmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2FkZE1lYWxUb0NhcnRMaXN0XHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQWRkIG1lYWwgdG8gY2FydCBsaXN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1lYWwgTWVhbCBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBBbW91bnQgb2YgbWVhbC5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTWVhbFRvQ2FydExpc3QobWVhbCwgYW1vdW50KSB7XHJcbiAgICAgICAgICAgIGxldCBuZXdNZWFsID0ge307XHJcblxyXG4gICAgICAgICAgICBuZXdNZWFsLmlkICAgICAgICA9IG1lYWwuaWQ7XHJcbiAgICAgICAgICAgIG5ld01lYWwubmFtZSAgICAgID0gbWVhbC5uYW1lO1xyXG4gICAgICAgICAgICBuZXdNZWFsLnByaWNlICAgICA9IG1lYWwucHJpY2U7XHJcbiAgICAgICAgICAgIG5ld01lYWwuYW1vdW50ICAgID0gYW1vdW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycykge1xyXG4gICAgICAgICAgICAgICAgbmV3TWVhbC5tb2RpZmllcnMgPSBtb2RpZmllcnMuc2xpY2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbW9kaWZpZXJzID0gbnVsbDtcclxuICAgICAgICAgICAgY2FydExpc3QucHVzaChuZXdNZWFsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5DYXJ0RmFjdG9yeSNnZXRDYXJ0TGlzdFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBjYXJ0IGxpc3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQ2FydCBsaXN0LlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRDYXJ0TGlzdCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhcnRMaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2dldFRvdGFsUHJpY2VcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZXR1cm4gY2FydCBsaXN0IHRvdGFsIHByaWNlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBDYXJ0IGxpc3QgdG90YWwgcHJpY2UuXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRvdGFsUHJpY2UoKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbFByaWNlID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXJ0TGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2FydExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQcmljZSArPSBjYXJ0TGlzdFtpXS5wcmljZSAqIGNhcnRMaXN0W2ldLmFtb3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcnRMaXN0W2ldLm1vZGlmaWVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IGdldE1vZGlmaWVyc1ByaWNlKGNhcnRMaXN0W2ldLm1vZGlmaWVycykgKiBjYXJ0TGlzdFtpXS5hbW91bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWxQcmljZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I2RlbGV0ZU1vZGlmaWVyc1xyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5DYXJ0RmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJlc2V0IG1vZGlmaWVycyB2YWx1ZS5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlTW9kaWZpZXJzKCkge1xyXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLkNhcnRGYWN0b3J5I3JlbW92ZU1lYWxcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuQ2FydEZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBSZW1vdmUgZWRpdCBtZWFsIG9mIGNhcnQgbGlzdC5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTWVhbCgpIHtcclxuICAgICAgICAgICAgY2FydExpc3Quc3BsaWNlKGluZGV4RWRpdE1lYWwsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoXCJNZWFsc1wiKVxyXG5cdFx0LmZhY3RvcnkoXCJNZWFsc0ZhY3RvcnlcIiwgTWVhbHNGYWN0b3J5KTtcclxuXHJcblx0LyoqXHJcblx0ICogQG5nZG9jIHNlcnZpY2VcclxuXHQgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHQgKiBAcmVxdWlyZXMgJGh0dHBcclxuXHQgKiBAcmVxdWlyZXMgJHFcclxuXHQgKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIEZhY3RvcnkgZ2V0IGN1cnJlbmN5LCBhcnJheSBvZiBwcm9kdWN0cyBhbmQgYXJyYXkgb2YgZHJpbmtzLFxyXG5cdCAqIGFuZCB3b3JrIHdpdGggY3VycmVudCBtZWFsLlxyXG5cdCAqXHJcblx0ICoqL1xyXG5cdGZ1bmN0aW9uIE1lYWxzRmFjdG9yeSgkaHR0cCwgJHEpIHtcclxuXHJcblx0XHRsZXQgbWVhbEFwaVVybCAgICAgICAgPSBcIm1lYWxzLmpzb25cIixcclxuXHRcdFx0bWVhbHMgICAgICAgICAgICAgPSBudWxsLFxyXG5cdFx0XHRjdXJyZW5jeSAgICAgICAgICA9IFwiXCIsXHJcblx0XHRcdGN1cnJlbnRNZWFsICAgICAgID0gbnVsbCxcclxuXHRcdFx0Y3VycmVudE1lYWxTdGF0dXMgPSBcIm5ld1wiLFxyXG5cdFx0XHRjdXJyZW50QW1vdW50ICAgICA9IDEsXHJcblxyXG5cdFx0XHRmYWN0b3J5ID0ge1xyXG5cdFx0XHRcdGdldE1vZGlmaWVycyAgICAgICAgIDogZ2V0TW9kaWZpZXJzLFxyXG5cdFx0XHRcdGdldE1lYWxzICAgICAgICAgICAgIDogZ2V0TWVhbHMsXHJcblx0XHRcdFx0Z2V0Q3VycmVudE1lYWwgICAgICAgOiBnZXRDdXJyZW50TWVhbCxcclxuXHRcdFx0XHRzZXRDdXJyZW50TWVhbCAgICAgICA6IHNldEN1cnJlbnRNZWFsLFxyXG5cdFx0XHRcdGdldEN1cnJlbnRNZWFsU3RhdHVzIDogZ2V0Q3VycmVudE1lYWxTdGF0dXMsXHJcblx0XHRcdFx0c2V0Q3VycmVudE1lYWxTdGF0dXMgOiBzZXRDdXJyZW50TWVhbFN0YXR1cyxcclxuXHRcdFx0XHRnZXRDdXJyZW5jeSAgICAgICAgICA6IGdldEN1cnJlbmN5LFxyXG5cdFx0XHRcdGdldEN1cnJlbnRNZWFsQW1vdW50IDogZ2V0Q3VycmVudE1lYWxBbW91bnQsXHJcblx0XHRcdFx0c2V0Q3VycmVudE1lYWxBbW91bnQgOiBzZXRDdXJyZW50TWVhbEFtb3VudCxcclxuXHRcdFx0XHRzZXRDdXJyZW50TWVhbEJ5SWQgICA6IHNldEN1cnJlbnRNZWFsQnlJZCxcclxuXHRcdFx0XHRvcGVuTWVhbCAgICAgICAgICAgICA6IG9wZW5NZWFsXHJcblx0XHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIGZhY3Rvcnk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgbWV0aG9kXHJcblx0XHQgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3Rvcnkjb3Blbk1lYWxcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqXHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIFNldCBjdXJyZW50IG1lYWwsIGN1cnJlbnQgbWVhbCBzdGF0dXMgYW5kIGN1cnJlbnQgbWVhbCBhbW91bnQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IG1lYWwgICBDdXJyZW50IG1lYWwuXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIE1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBNZWFsIGFtb3VudC5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIG9wZW5NZWFsKG1lYWwsIHN0YXR1cywgYW1vdW50KSB7XHJcblx0XHRcdHNldEN1cnJlbnRNZWFsKG1lYWwpO1xyXG5cdFx0XHRzZXRDdXJyZW50TWVhbFN0YXR1cyhzdGF0dXMpO1xyXG5cdFx0XHRzZXRDdXJyZW50TWVhbEFtb3VudChhbW91bnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I2dldE1lYWxzRnJvbUh0dHBcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogT2J0YWluaW5nIGRhdGEgb24gZm9vZHMgYW5kIGRyaW5rcyBmcm9tIHRoZSBzZXJ2ZXIuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGRlZmVycmVkIERlZmVycmVkIG9iamVjdC5cclxuXHRcdCAqIEByZXR1cm4ge29iamVjdH0gRGVmZXJyZWQgb2JqZWN0IHdpdGggcmVzb2x2ZSBhbmQgcmVqZWN0LlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCkge1xyXG5cclxuXHRcdFx0JGh0dHAoe21ldGhvZCA6IFwiR0VUXCIsIHVybCA6IG1lYWxBcGlVcmx9KVxyXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdFx0XHRtZWFscyAgICA9IGRhdGE7XHJcblx0XHRcdFx0XHRjdXJyZW5jeSA9IGRhdGEuY3VycmVuY3k7XHJcblxyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoXCJFcnJvciBpbiAkaHR0cCByZXF1ZXN0XCIpO1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coc3RhdHVzKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNnZXRNb2RpZmllcnNcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogSWYgbWVhbHMgaGF2ZSBtb2RpZmllcnMgcmV0dXJuIHRoZW0gZWxzZSByZXR1cm4gZmFsc2VcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHtvYmplY3R8Ym9vbGVhbn0gQ3VycmVudCBtZWFsIG1vZGlmaWVycyBvciBmYWxzZS5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIGdldE1vZGlmaWVycygpIHtcclxuXHJcblx0XHRcdGlmIChjdXJyZW50TWVhbCAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdHJldHVybiBjdXJyZW50TWVhbC5tb2RpZmllcnM7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgbWV0aG9kXHJcblx0XHQgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0TWVhbHNcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogUmV0dXJuIHByb21pc2Ugd2l0aCB0aGUgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIG9yXHJcblx0XHQgKiBpZiB0aGUgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuLCByZXR1cm4gcHJvbWlzZSB3aXRoIHRoZVxyXG5cdFx0ICogbWVhbHMgb2JqZWN0LlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4ge29iamVjdH0gUHJvbWlzZS5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIGdldE1lYWxzKCkge1xyXG5cdFx0XHRsZXQgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuXHRcdFx0aWYgKCFtZWFscykge1xyXG5cdFx0XHRcdGRlZmVycmVkID0gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShtZWFscyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I2dldEN1cnJlbnRNZWFsXHJcblx0XHQgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIFJldHVybiBjdXJyZW50IG1lYWwuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fSBDdXJyZW50IG1lYWwuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiBnZXRDdXJyZW50TWVhbCgpIHtcclxuXHRcdFx0cmV0dXJuIGN1cnJlbnRNZWFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I3NldEN1cnJlbnRNZWFsXHJcblx0XHQgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIFNldCBjdXJyZW50IG1lYWwuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IG1lYWwgQ3VycmVudCBtZWFsLlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWwobWVhbCkge1xyXG5cdFx0XHRjdXJyZW50TWVhbCA9IG1lYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgbWV0aG9kXHJcblx0XHQgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0Q3VycmVudE1lYWxTdGF0dXNcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogUmV0dXJuIGN1cnJlbnQgbWVhbCBzdGF0dXMoXCJuZXdcIiBvciBcImVkaXRcIikuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB7c3RyaW5nfSBDdXJyZW50IG1lYWwgc3RhdHVzKFwibmV3XCIgb3IgXCJlZGl0XCIpLlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVudE1lYWxTdGF0dXMoKSB7XHJcblx0XHRcdHJldHVybiBjdXJyZW50TWVhbFN0YXR1cztcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNzZXRDdXJyZW50TWVhbFN0YXR1c1xyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG5cdFx0ICogQGRlc2NyaXB0aW9uXHJcblx0XHQgKiBTZXQgY3VycmVudCBtZWFsIHN0YXR1cyhcIm5ld1wiIG9yIFwiZWRpdFwiKS5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIEN1cnJlbnQgbWVhbCBzdGF0dXMoXCJuZXdcIiBvciBcImVkaXRcIikuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbFN0YXR1cyhzdGF0dXMpIHtcclxuXHRcdFx0Y3VycmVudE1lYWxTdGF0dXMgPSBzdGF0dXM7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgbWV0aG9kXHJcblx0XHQgKiBAbmFtZSBNZWFscy5NZWFsc0ZhY3RvcnkjZ2V0Q3VycmVuY3lcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogUmV0dXJuIGN1cnJlbmN5LlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4ge3N0cmluZ30gQ3VycmVuY3kuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiBnZXRDdXJyZW5jeSgpIHtcclxuXHRcdFx0cmV0dXJuIGN1cnJlbmN5O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuTWVhbHNGYWN0b3J5I2dldEN1cnJlbnRNZWFsQW1vdW50XHJcblx0XHQgKiBAbWV0aG9kT2YgTWVhbHMuTWVhbHNGYWN0b3J5XHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIFJldHVybiBjdXJyZW50IG1lYWwgYW1vdW50LlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gQ3VycmVudCBtZWFsIGFtb3VudC5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIGdldEN1cnJlbnRNZWFsQW1vdW50KCkge1xyXG5cdFx0XHRyZXR1cm4gY3VycmVudEFtb3VudDtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNzZXRDdXJyZW50TWVhbEFtb3VudFxyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG5cdFx0ICogQGRlc2NyaXB0aW9uXHJcblx0XHQgKiBTZXQgY3VycmVudCBtZWFsIGFtb3VudC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEN1cnJlbnQgbWVhbCBhbW91bnQuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbEFtb3VudChhbW91bnQpIHtcclxuXHRcdFx0Y3VycmVudEFtb3VudCA9IGFtb3VudDtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLk1lYWxzRmFjdG9yeSNzZXRDdXJyZW50TWVhbEJ5SWRcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogU2V0IGN1cnJlbnQgbWVhbCBieSBpZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgSWQgb2YgY3VycmVudCBtZWFsLlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWxCeUlkKGlkKSB7XHJcblxyXG5cdFx0XHRjdXJyZW50TWVhbCA9IG1lYWxzLnByb2R1Y3RzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xyXG5cclxuXHRcdFx0aWYgKCFjdXJyZW50TWVhbCkge1xyXG5cdFx0XHRcdGN1cnJlbnRNZWFsID0gbWVhbHMuZHJpbmtzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuZmFjdG9yeShcIk1vZGlmaWVyc0ZhY3RvcnlcIiwgTW9kaWZpZXJzRmFjdG9yeSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxyXG4gICAgICogQG5hbWUgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeVxyXG4gICAgICogQHJlcXVpcmVzIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBGYWN0b3J5IHdvcmsgd2l0aCBtb2RpZmllcnMuXHJcbiAgICAgKlxyXG4gICAgICoqL1xyXG4gICAgZnVuY3Rpb24gTW9kaWZpZXJzRmFjdG9yeShDYXJ0RmFjdG9yeSkge1xyXG5cclxuICAgICAgICBsZXQgZmFjdG9yeSA9IHtcclxuICAgICAgICAgICAgZ2V0Q2hlY2tlZE1vZGlmaWVycyAgICAgOiBnZXRDaGVja2VkTW9kaWZpZXJzLFxyXG4gICAgICAgICAgICBtb2RpZmllckhhc0JlZW5TZWxlY3RlZCA6IG1vZGlmaWVySGFzQmVlblNlbGVjdGVkLFxyXG4gICAgICAgICAgICBkZWxldGVNb2RpZmllciAgICAgICAgICA6IGRlbGV0ZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICBzZWxlY3RNb2RpZmllciAgICAgICAgICA6IHNlbGVjdE1vZGlmaWVyLFxyXG4gICAgICAgICAgICBwaWNrQ2hlY2tlZE1vZGlmaWVycyAgICA6IHBpY2tDaGVja2VkTW9kaWZpZXJzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I2dldENoZWNrZWRNb2RpZmllcnNcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBhcnJheSB3aXRoIG1vZGlmaWVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4ge29iamVjdFtdfSBBcnJheSBvZiBtb2RpZmllcnMgb2JqZWN0cy5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2hlY2tlZE1vZGlmaWVycygpIHtcclxuICAgICAgICAgICAgbGV0IGNhcnRMaXN0ID0gQ2FydEZhY3RvcnkuZ2V0Q2FydExpc3QoKVtDYXJ0RmFjdG9yeS5nZXRJbmRleEVkaXRNZWFsKCldO1xyXG4gICAgICAgICAgICByZXR1cm4gY2FydExpc3QubW9kaWZpZXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnkjbW9kaWZpZXJIYXNCZWVuU2VsZWN0ZWRcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIG1vZGlmaWVyIGhhcyBiZWVuIHNlbGVjdGVkLCBvciBmYWxzZSBpZiBuby5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0W119IHNlbGVjdGVkTW9kaWZpZXJzIEFycmF5IHdpdGggc2VsZWN0ZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtb2RpZmllciBNb2RpZmllciBvYmplY3QuXHJcbiAgICAgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb2RpZmllciBoYXMgYmVlbiBzZWxlY3RlZCwgZWxzZSBmYWxzZS5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gbW9kaWZpZXJIYXNCZWVuU2VsZWN0ZWQoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZE1vZGlmaWVycy5zb21lKChpdGVtKSA9PiBtb2RpZmllci5uYW1lID09PSBpdGVtLm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnkjZGVsZXRlTW9kaWZpZXJcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuTW9kaWZpZXJzRmFjdG9yeVxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIERlbGV0ZSBtb2RpZmllciBhdCBhcnJheSBzZWxlY3RlZCBtb2RpZmllcnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBzZWxlY3RlZE1vZGlmaWVycyBBcnJheSB3aXRoIHNlbGVjdGVkIG1vZGlmaWVycy5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gbW9kaWZpZXIgTW9kaWZpZXIgb2JqZWN0IHdobyBiZSBkZWxldGVkLlxyXG4gICAgICAgICAqIEByZXR1cm4ge29iamVjdFtdfSBOZXcgYXJyYXkgb2YgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBkZWxldGVNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTW9kaWZpZXJzLmZpbHRlcigoaXRlbSkgPT4gbW9kaWZpZXIubmFtZSAhPT0gaXRlbS5uYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I3NlbGVjdE1vZGlmaWVyXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBBZGQgbW9kaWZpZXIgaWYgaXQgbm90IGhhcyBiZWVuIHNlbGVjdGVkLCBlbHNlIGRlbGV0ZSBtb2RpZmllciBhdFxyXG4gICAgICAgICAqIGFycmF5IG9mIHNlbGVjdGVkIG1vZGlmaWVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0W119IHNlbGVjdGVkTW9kaWZpZXJzIEFycmF5IHdpdGggc2VsZWN0ZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtb2RpZmllciBNb2RpZmllciBvYmplY3QuXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFtb2RpZmllckhhc0JlZW5TZWxlY3RlZChzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTW9kaWZpZXJzID0gZGVsZXRlTW9kaWZpZXIoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQ2FydEZhY3RvcnkuYWRkTW9kaWZpZXJzVG9MaXN0KHNlbGVjdGVkTW9kaWZpZXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5Nb2RpZmllcnNGYWN0b3J5I3BpY2tDaGVja2VkTW9kaWZpZXJzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLk1vZGlmaWVyc0ZhY3RvcnlcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBQaWNrIGFsbCBjaGVja2VkIG1vZGlmaWVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0W119IG1vZGlmaWVycyBBbGwgbW9kaWZpZXJzIG9mIGN1cnJlbnQgbWVhbC5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBzZWxlY3RlZE1vZGlmaWVycyBBcnJheSB3aGVyZSB3aWxsIGJlIHBsYWNlZCBtb2RpZmllcnMuXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3RbXX0gY2hlY2tlZE1vZGlmaWVycyBBcnJheSB3aXRoIGNoZWNrZWQgbW9kaWZpZXJzLlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBwaWNrQ2hlY2tlZE1vZGlmaWVycyhtb2RpZmllcnMsIHNlbGVjdGVkTW9kaWZpZXJzLCBjaGVja2VkTW9kaWZpZXJzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZE1vZGlmaWVycykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbkNoZWNrZWRNb2RpZmllcnMgPSBjaGVja2VkTW9kaWZpZXJzLmxlbmd0aDsgaSA8IGxlbkNoZWNrZWRNb2RpZmllcnM7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbGVuTW9kaWZpZXJzID0gbW9kaWZpZXJzLmxlbmd0aDsgaiA8IGxlbk1vZGlmaWVyczsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXJzW2pdLm5hbWUgPT09IGNoZWNrZWRNb2RpZmllcnNbaV0ubmFtZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyc1tqXS5jaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXJzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5kaXJlY3RpdmU6YXBwUGFnZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSBvZiBhcHAuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdXNhZ2UgPGFwcC1wYWdlPjwvYXBwLXBhZ2U+XHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIC5jb21wb25lbnQoXCJhcHBQYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9hcHAvdGVtcGxhdGUvYXBwUGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImFwcFwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBBcHBDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpBcHBDb250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcImFwcFBhZ2VcIi5cclxuICAgICAqKi9cclxuICAgIGZ1bmN0aW9uIEFwcENvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmNhcnRQYWdlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGNhcnQgcGFnZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB1c2FnZSA8Y2FydC1wYWdlPjwvY2FydC1wYWdlPlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICAuY29tcG9uZW50KFwiY2FydFBhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2NhcnQvdGVtcGxhdGUvY2FydFBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjYXJ0XCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IENhcnRDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpDYXJ0Q29udHJvbGxlclxyXG4gICAgICogQHJlcXVpcmVzIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG4gICAgICogQHJlcXVpcmVzIE1lYWxzLkNhcnRGYWN0b3J5XHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVuY3kgQ3VycmVuY3kuXHJcbiAgICAgKiBAcHJvcGVydHkge29iamVjdFtdfSAgY2FydExpc3QgQXJyYXkgb2Ygc2VsZWN0IG1lYWxzIGFuZCBkcmlua3MuXHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdG90YWxQcmljZSBUb3RhbCBwcmljZS5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwiY2FydFBhZ2VcIi5cclxuICAgICAqIERpc3BsYXkgdXNlci1zZWxlY3RlZCBtZWFscyBhbmQgZHJpbmtzIGFuZCB0aGVpciB0b3RhbCBwcmljZS5cclxuICAgICAqIFByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIGVkaXQgdGhlaXIgY2hvaWNlLlxyXG4gICAgICoqL1xyXG4gICAgZnVuY3Rpb24gQ2FydENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5LCBDYXJ0RmFjdG9yeSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0uY3VycmVuY3kgICA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW5jeSgpO1xyXG4gICAgICAgIHZtLmNhcnRMaXN0ICAgPSBDYXJ0RmFjdG9yeS5nZXRDYXJ0TGlzdCgpO1xyXG4gICAgICAgIHZtLnRvdGFsUHJpY2UgPSBDYXJ0RmFjdG9yeS5nZXRUb3RhbFByaWNlKCk7XHJcbiAgICAgICAgdm0uZWRpdE1lYWwgICA9IGVkaXRNZWFsO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpDYXJ0Q29udHJvbGxlciNlZGl0TWVhbFxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOkNhcnRDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogT3BlbiBtZWFsIGZvciBlZGl0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG1lYWwgTWVhbCBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEN1cnJlbnQgbWVhbCBpbmRleC5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gZWRpdE1lYWwobWVhbCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgQ2FydEZhY3Rvcnkuc2V0SW5kZXhFZGl0TWVhbChpbmRleCk7XHJcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5zZXRDdXJyZW50TWVhbEJ5SWQobWVhbC5pZCk7XHJcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5zZXRDdXJyZW50TWVhbEFtb3VudChtZWFsLmFtb3VudCk7XHJcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5zZXRDdXJyZW50TWVhbFN0YXR1cyhcImVkaXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOmNhcnRJY29uUGFnZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSBvZiBjYXJ0IGJ1dHRvbiBhbmQgc3RyaW5nIHdpdGggbWVhbHMgY291bnQuXHJcbiAgICAgICAgICogQWNjZXB0cyBmcm9tIHBhcmVudCBjb250cm9sbGVyIGNvdW50IG1lYWxzIGluIGNhcnQgaW4gdmFyaWFibGUgXCJjb3VudFwiLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHVzYWdlIDxjYXJ0LWljb24tcGFnZT48L2NhcnQtaWNvbi1wYWdlPlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICAuY29tcG9uZW50KFwiY2FydEljb25QYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9jYXJ0SWNvbi90ZW1wbGF0ZS9jYXJ0SWNvblBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgY291bnQ6IFwiQFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJjYXJ0SWNvblwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBDYXJ0SWNvbkNvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkNhcnRJY29uQ29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJjYXJ0SWNvblBhZ2VcIi5cclxuICAgICAqKi9cclxuICAgIGZ1bmN0aW9uIENhcnRJY29uQ29udHJvbGxlcigpIHt9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5kaXJlY3RpdmU6ZHJpbmtzTGlzdFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBsaXN0IG9mIGRyaW5rcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB1c2FnZSA8ZHJpbmtzLWxpc3Q+PC9kcmlua3MtbGlzdD5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgLmNvbXBvbmVudChcImRyaW5rc0xpc3RcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2RyaW5rc0xpc3QvdGVtcGxhdGUvZHJpbmtzTGlzdC5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImRyaW5rc0xpc3RcIixcclxuICAgICAgICAgICAgY29udHJvbGxlcjogRHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyXHJcbiAgICAgKiBAcmVxdWlyZXMgTWVhbHMuTWVhbHNGYWN0b3J5XHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVuY3kgQ3VycmVuY3kuXHJcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IG9ubHlTb2Z0RHJpbmtzIFZhcmlhYmxlIGluZGljYXRpbmcgc2VsZWN0IG9ubHkgc29mdCBkcmluayBvciBuby5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwiZHJpbmtzTGlzdFwiLlxyXG4gICAgICogSGFuZGxlIGEgdXNlciBjaG9pY2UgYWJvdXQgZHJpbmsuXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBEcmlua3NMaXN0Q29udHJvbGxlcihNZWFsc0ZhY3RvcnkpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgdm0gICAgID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0uZHJpbmtzICAgICAgICAgICA9IFtdO1xyXG4gICAgICAgIHZtLm9ubHlTb2Z0RHJpbmtzICAgPSBmYWxzZTtcclxuICAgICAgICB2bS5jdXJyZW5jeSAgICAgICAgID0gXCJcIjtcclxuICAgICAgICB2bS5vcGVuRHJpbmsgICAgICAgID0gb3BlbkRyaW5rO1xyXG4gICAgICAgIHZtLmdldERyaW5rc0ZvclZpZXcgPSBnZXREcmlua3NGb3JWaWV3O1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpEcmlua3NMaXN0Q29udHJvbGxlciNhY3RpdmF0ZVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogTWV0aG9kIHRvIGluaXRpYWxpemUgZGF0YS5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5nZXRNZWFscygpXHJcbiAgICAgICAgICAgICAgICAudGhlbihnZXREcmlua3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXIjZ2V0RHJpbmtzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBBc3NpZ25pbmcgYSBkYXRhIGF0IHByb3BlcnRpZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZHJpbmtzT2JqIERyaW5rcyBvYmplY3QgY29udGFpbnMgY3VycmVuY3kgYW5kIGRyaW5rcyBhcnJheS5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RHJpbmtzKGRyaW5rc09iaikge1xyXG4gICAgICAgICAgICB2bS5jdXJyZW5jeSA9IGRyaW5rc09iai5jdXJyZW5jeTtcclxuICAgICAgICAgICAgdm0uZHJpbmtzICAgPSBkcmlua3NPYmouZHJpbmtzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXIjb3BlbkRyaW5rXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6RHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDYWxsIG1ldGhvZCBvcGVuTWVhbCBvd25lZCBNZWFsc0ZhY3RvcnkuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZHJpbmsgRHJpbmsgb2JqZWN0LlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBvcGVuRHJpbmsoZHJpbmspIHtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5Lm9wZW5NZWFsKGRyaW5rLCBcIm5ld1wiLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOkRyaW5rc0xpc3RDb250cm9sbGVyI2dldERyaW5rc0ZvclZpZXdcclxuICAgICAgICAgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpEcmlua3NMaXN0Q29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiBhbGwgZHJpbmtzIG9yIG9ubHkgc29mdCBkcmlua3MuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQXJyYXkgb2YgZHJpbmtzLlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXREcmlua3NGb3JWaWV3KCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHZtLm9ubHlTb2Z0RHJpbmtzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm0uZHJpbmtzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50aXBwbGUgIT09IHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmRyaW5rcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTplcnJvclBhZ2VcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgZXJyb3IgcGFnZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB1c2FnZSA8ZXJyb3ItcGFnZT48L2Vycm9yLXBhZ2U+XHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIC5jb21wb25lbnQoXCJlcnJvclBhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2Vycm9yL3RlbXBsYXRlL2Vycm9yUGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IEVycm9yQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6RXJyb3JDb250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcImVycm9yUGFnZVwiLlxyXG4gICAgICoqL1xyXG4gICAgZnVuY3Rpb24gRXJyb3JDb250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTpmb290ZXJQYWdlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGZvb3RlciBzZWN0aW9uLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHVzYWdlIDxmb290ZXItcGFnZT48L2Zvb3Rlci1wYWdlPlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICAuY29tcG9uZW50KFwiZm9vdGVyUGFnZVwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvZm9vdGVyL3RlbXBsYXRlL2Zvb3RlclBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJmb290ZXJcIixcclxuICAgICAgICAgICAgY29udHJvbGxlcjogRm9vdGVyQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6Rm9vdGVyQ29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJmb290ZXJQYWdlXCIuXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBGb290ZXJDb250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTpoZWFkZXJQYWdlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGhlYWRlciBzZWN0aW9uLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHVzYWdlIDxoZWFkZXItcGFnZT48L2hlYWRlci1wYWdlPlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICAuY29tcG9uZW50KFwiaGVhZGVyUGFnZVwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvaGVhZGVyL3RlbXBsYXRlL2hlYWRlclBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJoZWFkZXJcIixcclxuICAgICAgICAgICAgY29udHJvbGxlcjogSGVhZGVyQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6SGVhZGVyQ29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJoZWFkZXJQYWdlXCIuXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBIZWFkZXJDb250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTpsb2dvUGFnZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBsb2dvIHNlY3Rpb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdXNhZ2UgPGxvZ28tcGFnZT48L2xvZ28tcGFnZT5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgLmNvbXBvbmVudChcImxvZ29QYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9sb2dvL3RlbXBsYXRlL2xvZ29QYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHt9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwibG9nb1wiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBMb2dvQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TG9nb0NvbnRyb2xsZXJcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwibG9nb1BhZ2VcIi5cclxuICAgICAqKi9cclxuICAgIGZ1bmN0aW9uIExvZ29Db250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmRpcmVjdGl2ZTptYWluUGFnZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBtYWluIHNlY3Rpb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdXNhZ2UgPG1haW4tcGFnZT48L21haW4tcGFnZT5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgLmNvbXBvbmVudChcIm1haW5QYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9tYWluL3RlbXBsYXRlL21haW5QYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHt9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwibWFpblwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBNYWluQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWFpbkNvbnRyb2xsZXJcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwibWFpblBhZ2VcIi5cclxuICAgICAqKi9cclxuICAgIGZ1bmN0aW9uIE1haW5Db250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoXCJNZWFsc1wiKVxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgZGlyZWN0aXZlXHJcblx0XHQgKiBAbmFtZSBNZWFscy5kaXJlY3RpdmU6bWVhbFBhZ2VcclxuXHRcdCAqXHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgbWVhbC5cclxuXHRcdCAqIEFjY2VwdHMgZnJvbSBwYXJlbnQgY29udHJvbGxlciBwYXRoIHdoZXJlIHRoZSB1c2VyIGNhbWUgaW4gdmFyaWFibGUgXCJwYXRoXCIuXHJcblx0XHQgKlxyXG5cdFx0ICogQHVzYWdlIDxtZWFsLXBhZ2U+PC9tZWFsLXBhZ2U+XHJcblx0XHQgKiovXHJcblx0XHQuY29tcG9uZW50KFwibWVhbFBhZ2VcIiwge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lYWwvdGVtcGxhdGUvbWVhbFBhZ2UuaHRtbFwiLFxyXG5cdFx0XHRiaW5kaW5nczoge1xyXG5cdFx0XHRcdHBhdGg6IFwiQFwiXHJcblx0XHRcdH0sXHJcblx0XHRcdGNvbnRyb2xsZXJBczogXCJtZWFsXCIsXHJcblx0XHRcdGNvbnRyb2xsZXI6IE1lYWxDb250cm9sbGVyXHJcblx0XHR9KTtcclxuXHJcblx0LyoqXHJcblx0ICogQG5nZG9jIGNvbnRyb2xsZXJcclxuXHQgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lYWxDb250cm9sbGVyXHJcblx0ICogQHJlcXVpcmVzIE1lYWxzLk1lYWxzRmFjdG9yeVxyXG5cdCAqIEByZXF1aXJlcyBNZWFscy5DYXJ0RmFjdG9yeVxyXG5cdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdXJyZW50TWVhbCBDdXJyZW50IG1lYWwuXHJcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnJlbmN5IEN1cnJlbmN5LlxyXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZWxlY3RBbW91bnQgQ3VycmVudCBtZWFsIHNlbGVjdCBhbW91bnQuXHJcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IG1lYWxTdGF0dXMgQ3VycmVudCBtZWFsIHN0YXR1cy5cclxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gY2FydENvdW50IENvdW50IG1lYWwgaW4gY2FydC5cclxuXHQgKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIENvbnRyb2xsZXIgY29tcG9uZW50IFwibWVhbFBhZ2VcIi5cclxuXHQgKiBBbGxvd3MgdGhlIHVzZXIgdG8gYWRkIG1lYWwgdG8gY2FydCwgZGVsZXRlIG1lYWwsIGVkaXQgbWVhbCBhbmQgZXRjLlxyXG5cdCAqKi9cclxuXHRmdW5jdGlvbiBNZWFsQ29udHJvbGxlcihNZWFsc0ZhY3RvcnksIENhcnRGYWN0b3J5KSB7XHJcblxyXG5cdFx0Y29uc3Qgdm0gPSB0aGlzO1xyXG5cclxuXHRcdHZtLmN1cnJlbnRNZWFsICA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbCgpO1xyXG5cdFx0dm0uY3VycmVuY3kgICAgID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbmN5KCk7XHJcblx0XHR2bS5zZWxlY3RBbW91bnQgPSBNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWxBbW91bnQoKTtcclxuXHRcdHZtLm1lYWxTdGF0dXMgICA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbFN0YXR1cygpO1xyXG5cdFx0dm0uY2FydENvdW50ICAgID0gQ2FydEZhY3RvcnkuZ2V0Q2FydExpc3RDb3VudCgpO1xyXG5cdFx0dm0uYWRkTWVhbCAgICAgID0gYWRkTWVhbDtcclxuXHRcdHZtLnJlbW92ZU1lYWwgICA9IHJlbW92ZU1lYWw7XHJcblx0XHR2bS5zYXZlTWVhbCAgICAgPSBzYXZlTWVhbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXIjYWRkTWVhbFxyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXJcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogQ2FsbCBtZXRob2QgYWRkTWVhbFRvQ2FydExpc3Qgb3duZWQgQ2FydEZhY3RvcnkuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiBhZGRNZWFsKCkge1xyXG5cdFx0XHRDYXJ0RmFjdG9yeS5hZGRNZWFsVG9DYXJ0TGlzdCh2bS5jdXJyZW50TWVhbCwgdm0uc2VsZWN0QW1vdW50KTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXIjcmVtb3ZlTWVhbFxyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXJcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogQ2FsbCBtZXRob2QgcmVtb3ZlTWVhbCBvd25lZCBDYXJ0RmFjdG9yeVxyXG5cdFx0ICogYW5kIG1ldGhvZCBkZWxldGVNb2RpZmllcnMgb3duZWQgQ2FydEZhY3RvcnkuXHJcblx0XHQgKiovXHJcblx0XHRmdW5jdGlvbiByZW1vdmVNZWFsKCkge1xyXG5cdFx0XHRDYXJ0RmFjdG9yeS5yZW1vdmVNZWFsKCk7XHJcblx0XHRcdENhcnRGYWN0b3J5LmRlbGV0ZU1vZGlmaWVycygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNZWFsQ29udHJvbGxlciNzYXZlTWVhbFxyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TWVhbENvbnRyb2xsZXJcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogQ2FsbCBtZXRob2QgcmVtb3ZlTWVhbCBvd25lZCBDYXJ0RmFjdG9yeVxyXG5cdFx0ICogYW5kIG1ldGhvZCBhZGRNZWFsVG9DYXJ0TGlzdCBvd25lZCBDYXJ0RmFjdG9yeS5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIHNhdmVNZWFsKCkge1xyXG5cdFx0XHRDYXJ0RmFjdG9yeS5yZW1vdmVNZWFsKCk7XHJcblx0XHRcdHZtLmFkZE1lYWwoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKFwiTWVhbHNcIilcclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIGRpcmVjdGl2ZVxyXG5cdFx0ICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1lYWxzTGlzdFxyXG5cdFx0ICpcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogQ29tcG9uZW50IHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBsaXN0IG9mIG1lYWxzLlxyXG5cdFx0ICpcclxuXHRcdCAqIEB1c2FnZSA8bWVhbHMtbGlzdD48L21lYWxzLWxpc3Q+XHJcblx0XHQgKiovXHJcblx0XHQuY29tcG9uZW50KFwibWVhbHNMaXN0XCIsIHtcclxuXHRcdFx0dGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9tZWFsc0xpc3QvdGVtcGxhdGUvbWVhbHNMaXN0Lmh0bWxcIixcclxuXHRcdFx0YmluZGluZ3M6IHt9LFxyXG5cdFx0XHRjb250cm9sbGVyQXM6IFwibWVhbHNMaXN0XCIsXHJcblx0XHRcdGNvbnRyb2xsZXI6IE1lYWxzTGlzdENvbnRyb2xsZXJcclxuXHRcdH0pO1xyXG5cclxuXHQvKipcclxuXHQgKiBAbmdkb2MgY29udHJvbGxlclxyXG5cdCAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbHNMaXN0Q29udHJvbGxlclxyXG5cdCAqIEByZXF1aXJlcyBNZWFscy5NZWFsc0ZhY3RvcnlcclxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVuY3kgQ3VycmVuY3kuXHJcblx0ICogQHByb3BlcnR5IHtvYmplY3RbXX0gcHJvZHVjdHMgQXJyYXkgb2YgcHJvZHVjdHMuXHJcblx0ICpcclxuXHQgKiBAZGVzY3JpcHRpb25cclxuXHQgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcIm1lYWxzTGlzdFwiLlxyXG5cdCAqIEhhbmRsZSBhIHVzZXIgY2hvaWNlIGFib3V0IG1lYWwuXHJcblx0ICoqL1xyXG5cdGZ1bmN0aW9uIE1lYWxzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XHJcblxyXG5cdFx0Y29uc3Qgdm0gPSB0aGlzO1xyXG5cclxuXHRcdHZtLm9wZW5NZWFsID0gb3Blbk1lYWw7XHJcblx0XHR2bS5jdXJyZW5jeSA9IFwiXCI7XHJcblx0XHR2bS5wcm9kdWN0cyA9IG51bGw7XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEBuZ2RvYyBtZXRob2RcclxuXHRcdCAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6TWVhbHNMaXN0Q29udHJvbGxlciNhY3RpdmF0ZVxyXG5cdFx0ICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TWVhbHNMaXN0Q29udHJvbGxlclxyXG5cdFx0ICogQGRlc2NyaXB0aW9uXHJcblx0XHQgKiBNZXRob2QgdG8gaW5pdGlhbGl6ZSBkYXRhLlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcblx0XHRcdE1lYWxzRmFjdG9yeS5nZXRNZWFscygpXHJcblx0XHRcdFx0LnRoZW4oZ2V0UHJvZHVjdHMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQG5nZG9jIG1ldGhvZFxyXG5cdFx0ICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNZWFsc0xpc3RDb250cm9sbGVyI2dldFByb2R1Y3RzXHJcblx0XHQgKiBAbWV0aG9kT2YgTWVhbHMuY29udHJvbGxlcjpNZWFsc0xpc3RDb250cm9sbGVyXHJcblx0XHQgKiBAZGVzY3JpcHRpb25cclxuXHRcdCAqIEFzc2lnbmluZyBhIGRhdGEgYXQgcHJvcGVydGllcy5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gbWVhbHNPYmogTWVhbHMgb2JqZWN0IGNvbnRhaW5zIGN1cnJlbmN5IGFuZCBwcm9kdWN0cyBhcnJheS5cclxuXHRcdCAqKi9cclxuXHRcdGZ1bmN0aW9uIGdldFByb2R1Y3RzKG1lYWxzT2JqKSB7XHJcblx0XHRcdHZtLmN1cnJlbmN5ID0gbWVhbHNPYmouY3VycmVuY3k7XHJcblx0XHRcdHZtLnByb2R1Y3RzID0gbWVhbHNPYmoucHJvZHVjdHM7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBAbmdkb2MgbWV0aG9kXHJcblx0XHQgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1lYWxzTGlzdENvbnRyb2xsZXIjb3Blbk1lYWxcclxuXHRcdCAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOk1lYWxzTGlzdENvbnRyb2xsZXJcclxuXHRcdCAqIEBkZXNjcmlwdGlvblxyXG5cdFx0ICogQ2FsbCBtZXRob2Qgb3Blbk1lYWwgb3duZWQgTWVhbHNGYWN0b3J5LlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBtZWFsIE1lYWwgb2JqZWN0LlxyXG5cdFx0ICoqL1xyXG5cdFx0ZnVuY3Rpb24gb3Blbk1lYWwobWVhbCkge1xyXG5cdFx0XHRNZWFsc0ZhY3Rvcnkub3Blbk1lYWwobWVhbCwgXCJuZXdcIiwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1lbnVQYWdlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIG1lbnUgc2VjdGlvbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB1c2FnZSA8bWVudS1wYWdlPjwvbWVudS1wYWdlPlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICAuY29tcG9uZW50KFwibWVudVBhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lbnUvdGVtcGxhdGUvbWVudVBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJtZW51XCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IE1lbnVDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29udHJvbGxlclxyXG4gICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNZW51Q29udHJvbGxlclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJtZW51UGFnZVwiLlxyXG4gICAgICoqL1xyXG4gICAgZnVuY3Rpb24gTWVudUNvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOm1vZGlmaWVyc1BhZ2VcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIENvbXBvbmVudCBwcm92aWRlcyBhbiBpbnRlcmZhY2Ugb2YgbW9kaWZpZXJzIHNlY3Rpb24uXHJcbiAgICAgICAgICogQWNjZXB0cyBmcm9tIHBhcmVudCBjb250cm9sbGVyIGN1cnJlbmN5IGluIHZhcmlhYmxlIFwiY3VycmVuY3lcIi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB1c2FnZSA8bW9kaWZpZXJzLXBhZ2U+PC9tb2RpZmllcnMtcGFnZT5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgLmNvbXBvbmVudChcIm1vZGlmaWVyc1BhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21vZGlmaWVycy90ZW1wbGF0ZS9tb2RpZmllcnNQYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBcIkBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwibW9kXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IE1vZGlmaWVyc0NvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb250cm9sbGVyXHJcbiAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1vZGlmaWVyc0NvbnRyb2xsZXJcclxuICAgICAqIEByZXF1aXJlcyBNZWFscy5NZWFsc0ZhY3RvcnlcclxuICAgICAqIEByZXF1aXJlcyBNZWFscy5Nb2RpZmllcnNGYWN0b3J5XHJcbiAgICAgKiBAcHJvcGVydHkge29iamVjdFtdfSBtb2RpZmllcnMgQXJyYXkgb2YgbW9kaWZpZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udHJvbGxlciBjb21wb25lbnQgXCJtb2RpZmllcnNQYWdlXCIuXHJcbiAgICAgKiBIYW5kbGUgYSB1c2VyIGNob2ljZSBhYm91dCBtb2RpZmllcnMuXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBNb2RpZmllcnNDb250cm9sbGVyKE1lYWxzRmFjdG9yeSwgTW9kaWZpZXJzRmFjdG9yeSkge1xyXG5cclxuICAgICAgICBjb25zdCB2bSAgICAgICAgICAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0ICAgc2VsZWN0ZWRNb2RpZmllcnMgPSBbXTtcclxuXHJcbiAgICAgICAgdm0ubW9kaWZpZXJzICAgICAgICAgID0gTWVhbHNGYWN0b3J5LmdldE1vZGlmaWVycygpO1xyXG4gICAgICAgIHZtLnNlbGVjdE1vZGlmaWVyICAgICA9IHNlbGVjdE1vZGlmaWVyO1xyXG4gICAgICAgIHZtLmNsZWFuUGlja01vZGlmaWVycyA9IGNsZWFuUGlja01vZGlmaWVycztcclxuXHJcbiAgICAgICAgdm0uY2xlYW5QaWNrTW9kaWZpZXJzKCk7XHJcblxyXG4gICAgICAgIGlmIChNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWxTdGF0dXMoKSA9PT0gXCJlZGl0XCIpIHtcclxuICAgICAgICAgICAgLy9QaWNrIGNoZWNrYm94ZXMgZm9yIHNlbGVjdCBtb2RpZmllcnNcclxuICAgICAgICAgICAgbGV0IGNoZWNrZWRNb2RpZmllcnMgPSBNb2RpZmllcnNGYWN0b3J5LmdldENoZWNrZWRNb2RpZmllcnMoKTtcclxuICAgICAgICAgICAgTW9kaWZpZXJzRmFjdG9yeS5waWNrQ2hlY2tlZE1vZGlmaWVycyh2bS5tb2RpZmllcnMsIHNlbGVjdGVkTW9kaWZpZXJzLCBjaGVja2VkTW9kaWZpZXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgKiBAbmFtZSBNZWFscy5jb250cm9sbGVyOk1vZGlmaWVyc0NvbnRyb2xsZXIjY2xlYW5QaWNrTW9kaWZpZXJzXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TW9kaWZpZXJzQ29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIENsZWFuIHBpY2sgbW9kaWZpZXJzIGNoZWNrYm94LlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBjbGVhblBpY2tNb2RpZmllcnMoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5tb2RpZmllcnMpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGlmaWVycy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmNoZWNrID0gZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuY29udHJvbGxlcjpNb2RpZmllcnNDb250cm9sbGVyI3NlbGVjdE1vZGlmaWVyXHJcbiAgICAgICAgICogQG1ldGhvZE9mIE1lYWxzLmNvbnRyb2xsZXI6TW9kaWZpZXJzQ29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIENhbGwgbWV0aG9kIHNlbGVjdE1vZGlmaWVyIG93bmVkIE1vZGlmaWVyc0ZhY3RvcnkuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gbW9kaWZpZXIgTW9kaWZpZXIgb2JqZWN0LlxyXG4gICAgICAgICAqKi9cclxuICAgICAgICBmdW5jdGlvbiBzZWxlY3RNb2RpZmllcihtb2RpZmllcikge1xyXG4gICAgICAgICAgICBNb2RpZmllcnNGYWN0b3J5LnNlbGVjdE1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAgICAgICAgICogQG5hbWUgTWVhbHMuZGlyZWN0aXZlOnNlbGVjdENvdW50XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgKiBDb21wb25lbnQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIHNlbGVjdCBhbW91bnQgb2YgbWVhbC5cclxuICAgICAgICAgKiBUcmFuc2ZlcnMgdG8gdGhlIHBhcmVudCBjb250cm9sbGVyIHNlbGVjdGVkIGFtb3VudCBvZiBtZWFsIGluIHZhcmlhYmxlIFwic2VsZWN0XCIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdXNhZ2UgPHNlbGVjdC1jb3VudD48L3NlbGVjdC1jb3VudD5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgLmNvbXBvbmVudChcInNlbGVjdENvdW50XCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9zZWxlY3RDb3VudC90ZW1wbGF0ZS9zZWxlY3RDb3VudFBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0OiBcIj1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwic2VsZWN0XCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFNlbGVjdENvdW50Q29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXJcclxuICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6U2VsZWN0Q291bnRDb250cm9sbGVyXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBDb250cm9sbGVyIGNvbXBvbmVudCBcInNlbGVjdENvdW50XCIuXHJcbiAgICAgKiBDYXB0dXJlcyB0aGUgdXNlcidzIGNob2ljZSBhdCBhbW91bnQuXHJcbiAgICAgKiovXHJcbiAgICBmdW5jdGlvbiBTZWxlY3RDb3VudENvbnRyb2xsZXIoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0uc2VsZWN0TnVtID0gc2VsZWN0TnVtO1xyXG4gICAgICAgIHZtLmFjdGl2ZU51bSA9IGFjdGl2ZU51bTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6U2VsZWN0Q291bnRDb250cm9sbGVyI3NlbGVjdE51bVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOlNlbGVjdENvdW50Q29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFNlbGVjdCBtZWFsIGFtb3VudC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW0gTWVhbCBhbW91bnQuXHJcbiAgICAgICAgICoqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE51bShudW0pIHtcclxuICAgICAgICAgICAgdm0uc2VsZWN0ID0gbnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIE1lYWxzLmNvbnRyb2xsZXI6U2VsZWN0Q291bnRDb250cm9sbGVyI2FjdGl2ZU51bVxyXG4gICAgICAgICAqIEBtZXRob2RPZiBNZWFscy5jb250cm9sbGVyOlNlbGVjdENvdW50Q29udHJvbGxlclxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHZhcmlhYmxlIHNlbGVjdCBpcyBudW0sIGVsc2UgZmFsc2UuXHJcbiAgICAgICAgICogSWYgZnVuY3Rpb24gcmV0dXJuIHRydWUsIHRoZSBidXR0b24gd2l0aCBudW0gZ2V0IGNsYXNzIFwiYWN0aXZlXCIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtIE1lYWwgYW1vdW50LlxyXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgc2VsZWN0IGlzIG51bS5cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZlTnVtKG51bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uc2VsZWN0ID09PSBudW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyJdfQ==
