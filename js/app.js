"use strict";!function(){angular.module("Meals",["ui.router"])}(),function(){function e(e,n){e.state("app",{url:"/app",template:"<app-page></app-page>"}).state("app.main",{url:"/main",template:"<main-page></main-page>"}).state("app.main.meals",{url:"/meals",template:"<meals-list id='mealsList'></meals-list>"}).state("app.main.drinks",{url:"/drinks",template:"<drinks-list></drinks-list>"}).state("app.meal",{url:"/meal/:path",controllerAs:"meal",controller:t,template:"<meal-page id='meal' path='{{ meal.path }}'></meal-page>"}).state("app.cart",{url:"/cart",template:"<cart-page id='cart'></cart-page>"}).state("error",{url:"/error",template:"<error-page></error-page>"}),n.otherwise("/app/main/meals")}function t(e){this.path=e.path}e.$inject=["$stateProvider","$urlRouterProvider"],t.$inject=["$stateParams"],angular.module("Meals").config(e)}(),function(){function e(){function e(e){var t=0,n=!0,r=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var i=a.value;t+=i.price}}catch(e){r=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(r)throw o}}return t}function t(){return p}function n(e){p=e}function r(){return s.length}function o(e){m=e}function a(e,t){var n={};n.id=e.id,n.name=e.name,n.price=e.price,n.amount=t,m&&(n.modifiers=m.slice()),m=null,s.push(n)}function l(){return s}function i(){var t=0;if(s.length>0)for(var n=0,r=s.length;n<r;n++)t+=s[n].price*s[n].amount,s[n].modifiers&&(t+=e(s[n].modifiers)*s[n].amount);return t.toFixed(2)}function c(){m=null}function u(){s.splice(p,1)}var s=[],m=null,p=0,f={getIndexEditMeal:t,setIndexEditMeal:n,getCartListCount:r,addModifiersToList:o,addMealToCartList:a,getCartList:l,getTotalPrice:i,deleteModifiers:c,removeMeal:u};return f}angular.module("Meals").factory("CartFactory",e)}(),function(){function e(e,t){function n(e,t,n){i(e),u(t),p(n)}function r(t){return e({method:"GET",url:d}).success(function(e){g=e,M=e.currency,t.resolve(e)}).error(function(e,n){t.reject("Error in $http request"),console.log(e),console.log(n)}),t}function o(){return null!==h&&h.modifiers}function a(){var e=t.defer();return g?e.resolve(g):e=r(e),e.promise}function l(){return h}function i(e){h=e}function c(){return C}function u(e){C=e}function s(){return M}function m(){return y}function p(e){y=e}function f(e){h=g.products.filter(function(t){return t.id===e})[0],h||(h=g.drinks.filter(function(t){return t.id===e})[0])}var d="meals.json",g=null,M="",h=null,C="new",y=1,v={getModifiers:o,getMeals:a,getCurrentMeal:l,setCurrentMeal:i,getCurrentMealStatus:c,setCurrentMealStatus:u,getCurrency:s,getCurrentMealAmount:m,setCurrentMealAmount:p,setCurrentMealById:f,openMeal:n};return v}e.$inject=["$http","$q"],angular.module("Meals").factory("MealsFactory",e)}(),function(){function e(e){function t(){var t=e.getCartList()[e.getIndexEditMeal()];return t.modifiers}function n(e,t){return e.some(function(e){return t.name===e.name})}function r(e,t){return e.filter(function(e){return t.name!==e.name})}function o(t,o){n(t,o)?t=r(t,o):t.push(o),e.addModifiersToList(t)}function a(e,t,n){if(n)for(var r=0,a=n.length;r<a;r++)for(var l=0,i=e.length;l<i;l++)e[l].name===n[r].name&&(e[l].check=!0,o(t,e[l]))}var l={getCheckedModifiers:t,modifierHasBeenSelected:n,deleteModifier:r,selectModifier:o,pickCheckedModifiers:a};return l}e.$inject=["CartFactory"],angular.module("Meals").factory("ModifiersFactory",e)}(),function(){function e(){}angular.module("Meals").component("appPage",{templateUrl:"component-templates/app/template/appPage.html",bindings:{},controllerAs:"app",controller:e})}(),function(){function e(e,t){function n(n,r){t.setIndexEditMeal(r),e.setCurrentMealById(n.id),e.setCurrentMealAmount(n.amount),e.setCurrentMealStatus("edit")}var r=this;r.currency=e.getCurrency(),r.cartList=t.getCartList(),r.totalPrice=t.getTotalPrice(),r.editMeal=n}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("cartPage",{templateUrl:"component-templates/cart/template/cartPage.html",bindings:{},controllerAs:"cart",controller:e})}(),function(){function e(){}angular.module("Meals").component("cartIconPage",{templateUrl:"component-templates/cartIcon/template/cartIconPage.html",bindings:{count:"@"},controllerAs:"cartIcon",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){a.currency=e.currency,l=e.drinks}function r(t){e.openMeal(t,"new",1)}function o(){return a.onlySoftDrinks?l.filter(function(e){return e.tipple!==!0}):l}var a=this,l=[];a.onlySoftDrinks=!1,a.currency="",a.openDrink=r,a.getDrinksForView=o,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("drinksList",{templateUrl:"component-templates/drinksList/template/drinksList.html",bindings:{},controllerAs:"drinksList",controller:e})}(),function(){function e(){}angular.module("Meals").component("errorPage",{templateUrl:"component-templates/error/template/errorPage.html",bindings:{},controllerAs:"error",controller:e})}(),function(){function e(){}angular.module("Meals").component("footerPage",{templateUrl:"component-templates/footer/template/footerPage.html",bindings:{},controllerAs:"footer",controller:e})}(),function(){function e(){}angular.module("Meals").component("headerPage",{templateUrl:"component-templates/header/template/headerPage.html",bindings:{},controllerAs:"header",controller:e})}(),function(){function e(){}angular.module("Meals").component("logoPage",{templateUrl:"component-templates/logo/template/logoPage.html",bindings:{},controllerAs:"logo",controller:e})}(),function(){function e(){}angular.module("Meals").component("mainPage",{templateUrl:"component-templates/main/template/mainPage.html",bindings:{},controllerAs:"main",controller:e})}(),function(){function e(e,t){function n(){t.addMealToCartList(a.currentMeal,a.selectAmount)}function r(){t.removeMeal(),t.deleteModifiers()}function o(){t.removeMeal(),a.addMeal()}var a=this;a.currentMeal=e.getCurrentMeal(),a.currency=e.getCurrency(),a.selectAmount=e.getCurrentMealAmount(),a.mealStatus=e.getCurrentMealStatus(),a.cartCount=t.getCartListCount(),a.addMeal=n,a.removeMeal=r,a.saveMeal=o}e.$inject=["MealsFactory","CartFactory"],angular.module("Meals").component("mealPage",{templateUrl:"component-templates/meal/template/mealPage.html",bindings:{path:"@"},controllerAs:"meal",controller:e})}(),function(){function e(e){function t(){e.getMeals().then(n)}function n(e){o.currency=e.currency,o.products=e.products}function r(t){e.openMeal(t,"new",1)}var o=this;o.openMeal=r,o.currency="",o.products=null,t()}e.$inject=["MealsFactory"],angular.module("Meals").component("mealsList",{templateUrl:"component-templates/mealsList/template/mealsList.html",bindings:{},controllerAs:"mealsList",controller:e})}(),function(){function e(){}angular.module("Meals").component("menuPage",{templateUrl:"component-templates/menu/template/menuPage.html",bindings:{},controllerAs:"menu",controller:e})}(),function(){function e(e,t){function n(){o.modifiers&&o.modifiers.forEach(function(e){return e.check=!1})}function r(e){t.selectModifier(a,e)}var o=this,a=[];if(o.modifiers=e.getModifiers(),o.selectModifier=r,n(),"edit"===e.getCurrentMealStatus()){var l=t.getCheckedModifiers();t.pickCheckedModifiers(o.modifiers,a,l)}}e.$inject=["MealsFactory","ModifiersFactory"],angular.module("Meals").component("modifiersPage",{templateUrl:"component-templates/modifiers/template/modifiersPage.html",bindings:{currency:"@"},controllerAs:"mod",controller:e})}(),function(){function e(){function e(e){n.select=e}function t(e){return n.select===e}var n=this;n.selectNum=e,n.activeNum=t}angular.module("Meals").component("selectCount",{templateUrl:"component-templates/selectCount/template/selectCountPage.html",bindings:{select:"="},controllerAs:"select",controller:e})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIm1haW4uanMiLCJjb25maWcuanMiLCJjYXJ0RmFjdG9yeS5qcyIsIm1lYWxzRmFjdG9yeS5qcyIsIm1vZGlmaWVyc0ZhY3RvcnkuanMiLCJhcHAvYXBwLmpzIiwiY2FydC9jYXJ0LmpzIiwiY2FydEljb24vY2FydEljb24uanMiLCJkcmlua3NMaXN0L2RyaW5rc0xpc3QuanMiLCJlcnJvci9lcnJvci5qcyIsImZvb3Rlci9mb290ZXIuanMiLCJoZWFkZXIvaGVhZGVyLmpzIiwibG9nby9sb2dvLmpzIiwibWFpbi9tYWluLmpzIiwibWVhbC9tZWFsLmpzIiwibWVhbHNMaXN0L21lYWxzTGlzdC5qcyIsIm1lbnUvbWVudS5qcyIsIm1vZGlmaWVycy9tb2RpZmllcnMuanMiLCJzZWxlY3RDb3VudC9zZWxlY3RDb3VudC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlIiwiY29udHJvbGxlckFzIiwiY29udHJvbGxlciIsIk1lYWxDb250cm9sbGVyIiwib3RoZXJ3aXNlIiwiJHN0YXRlUGFyYW1zIiwidGhpcyIsInBhdGgiLCJDYXJ0RmFjdG9yeSIsImdldE1vZGlmaWVyc1ByaWNlIiwibW9kaWZpZXJzQXJyIiwidG90YWxQcmljZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwidW5kZWZpbmVkIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwibW9kaWZpZXIiLCJ2YWx1ZSIsInByaWNlIiwiZXJyIiwicmV0dXJuIiwiZ2V0SW5kZXhFZGl0TWVhbCIsImluZGV4RWRpdE1lYWwiLCJzZXRJbmRleEVkaXRNZWFsIiwiaW5kZXgiLCJnZXRDYXJ0TGlzdENvdW50IiwiY2FydExpc3QiLCJsZW5ndGgiLCJhZGRNb2RpZmllcnNUb0xpc3QiLCJtb2RpZiIsIm1vZGlmaWVycyIsImFkZE1lYWxUb0NhcnRMaXN0IiwibWVhbCIsImFtb3VudCIsIm5ld01lYWwiLCJpZCIsIm5hbWUiLCJzbGljZSIsInB1c2giLCJnZXRDYXJ0TGlzdCIsImdldFRvdGFsUHJpY2UiLCJpIiwibGVuIiwidG9GaXhlZCIsImRlbGV0ZU1vZGlmaWVycyIsInJlbW92ZU1lYWwiLCJzcGxpY2UiLCJmYWN0b3J5IiwiTWVhbHNGYWN0b3J5IiwiJGh0dHAiLCIkcSIsIm9wZW5NZWFsIiwic3RhdHVzIiwic2V0Q3VycmVudE1lYWwiLCJzZXRDdXJyZW50TWVhbFN0YXR1cyIsInNldEN1cnJlbnRNZWFsQW1vdW50IiwiZ2V0TWVhbHNGcm9tSHR0cCIsImRlZmVycmVkIiwibWV0aG9kIiwibWVhbEFwaVVybCIsInN1Y2Nlc3MiLCJkYXRhIiwibWVhbHMiLCJjdXJyZW5jeSIsInJlc29sdmUiLCJlcnJvciIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJnZXRNb2RpZmllcnMiLCJjdXJyZW50TWVhbCIsImdldE1lYWxzIiwiZGVmZXIiLCJwcm9taXNlIiwiZ2V0Q3VycmVudE1lYWwiLCJnZXRDdXJyZW50TWVhbFN0YXR1cyIsImN1cnJlbnRNZWFsU3RhdHVzIiwiZ2V0Q3VycmVuY3kiLCJnZXRDdXJyZW50TWVhbEFtb3VudCIsImN1cnJlbnRBbW91bnQiLCJzZXRDdXJyZW50TWVhbEJ5SWQiLCJwcm9kdWN0cyIsImZpbHRlciIsIml0ZW0iLCJkcmlua3MiLCJNb2RpZmllcnNGYWN0b3J5IiwiZ2V0Q2hlY2tlZE1vZGlmaWVycyIsIm1vZGlmaWVySGFzQmVlblNlbGVjdGVkIiwic2VsZWN0ZWRNb2RpZmllcnMiLCJzb21lIiwiZGVsZXRlTW9kaWZpZXIiLCJzZWxlY3RNb2RpZmllciIsInBpY2tDaGVja2VkTW9kaWZpZXJzIiwiY2hlY2tlZE1vZGlmaWVycyIsImxlbkNoZWNrZWRNb2RpZmllcnMiLCJqIiwibGVuTW9kaWZpZXJzIiwiY2hlY2siLCJBcHBDb250cm9sbGVyIiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJiaW5kaW5ncyIsIkNhcnRDb250cm9sbGVyIiwiZWRpdE1lYWwiLCJ2bSIsIkNhcnRJY29uQ29udHJvbGxlciIsImNvdW50IiwiRHJpbmtzTGlzdENvbnRyb2xsZXIiLCJhY3RpdmF0ZSIsInRoZW4iLCJnZXREcmlua3MiLCJkcmlua3NPYmoiLCJvcGVuRHJpbmsiLCJkcmluayIsImdldERyaW5rc0ZvclZpZXciLCJvbmx5U29mdERyaW5rcyIsInRpcHBsZSIsIkVycm9yQ29udHJvbGxlciIsIkZvb3RlckNvbnRyb2xsZXIiLCJIZWFkZXJDb250cm9sbGVyIiwiTG9nb0NvbnRyb2xsZXIiLCJNYWluQ29udHJvbGxlciIsImFkZE1lYWwiLCJzZWxlY3RBbW91bnQiLCJzYXZlTWVhbCIsIm1lYWxTdGF0dXMiLCJjYXJ0Q291bnQiLCJNZWFsc0xpc3RDb250cm9sbGVyIiwiZ2V0UHJvZHVjdHMiLCJtZWFsc09iaiIsIk1lbnVDb250cm9sbGVyIiwiTW9kaWZpZXJzQ29udHJvbGxlciIsImNsZWFuUGlja01vZGlmaWVycyIsImZvckVhY2giLCJTZWxlY3RDb3VudENvbnRyb2xsZXIiLCJzZWxlY3ROdW0iLCJudW0iLCJzZWxlY3QiLCJhY3RpdmVOdW0iXSwibWFwcGluZ3MiOiJBQUFBLGNDQUEsV0FHSUEsUUFDS0MsT0FBTyxTQUFVLGlCQ0oxQixXQU9JLFFBQVNDLEdBQU9DLEVBQWdCQyxHQUU1QkQsRUFDS0UsTUFBTSxPQUNIQyxJQUFLLE9BQ0xDLFNBQVUsMEJBRWJGLE1BQU0sWUFDSEMsSUFBSyxRQUNMQyxTQUFVLDRCQUViRixNQUFNLGtCQUNIQyxJQUFLLFNBQ0xDLFNBQVUsNkNBRWJGLE1BQU0sbUJBQ0hDLElBQUssVUFDTEMsU0FBVSxnQ0FFYkYsTUFBTSxZQUNIQyxJQUFLLGNBQ0xFLGFBQWMsT0FDZEMsV0FBWUMsRUFDWkgsU0FBVSw2REFFYkYsTUFBTSxZQUNIQyxJQUFLLFFBQ0xDLFNBQVUsc0NBRWJGLE1BQU0sU0FDSEMsSUFBSyxTQUNMQyxTQUFVLDhCQUdsQkgsRUFBbUJPLFVBQVUsbUJBR2pDLFFBQVNELEdBQWVFLEdBQ3BCQyxLQUFLQyxLQUFPRixFQUFhRSxrRkExQzdCZCxRQUNLQyxPQUFPLFNBQ1BDLE9BQU9BLE1DTGhCLFdBT0ksUUFBU2EsS0FvQkwsUUFBU0MsR0FBa0JDLEdBQ3ZCLEdBQUlDLEdBQWEsRUFEb0JDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxFQUFBQyxNQUFBLEtBR3JDLElBQUEsR0FBQUMsR0FBQUMsRUFBcUJQLEVBQXJCUSxPQUFBQyxjQUFBUCxHQUFBSSxFQUFBQyxFQUFBRyxRQUFBQyxNQUFBVCxHQUFBLEVBQW1DLENBQUEsR0FBMUJVLEdBQTBCTixFQUFBTyxLQUMvQlosSUFBY1csRUFBU0UsT0FKVSxNQUFBQyxHQUFBWixHQUFBLEVBQUFDLEVBQUFXLFVBQUEsS0FBQWIsR0FBQUssRUFBQVMsUUFBQVQsRUFBQVMsaUJBQUEsR0FBQWIsRUFBQSxLQUFBQyxJQU9yQyxNQUFPSCxHQUdYLFFBQVNnQixLQUNMLE1BQU9DLEdBR1gsUUFBU0MsR0FBaUJDLEdBQ3RCRixFQUFnQkUsRUFHcEIsUUFBU0MsS0FDTCxNQUFPQyxHQUFTQyxPQUdwQixRQUFTQyxHQUFtQkMsR0FDeEJDLEVBQVlELEVBR2hCLFFBQVNFLEdBQWtCQyxFQUFNQyxHQUM3QixHQUFJQyxLQUVKQSxHQUFRQyxHQUFZSCxFQUFLRyxHQUN6QkQsRUFBUUUsS0FBWUosRUFBS0ksS0FDekJGLEVBQVFoQixNQUFZYyxFQUFLZCxNQUN6QmdCLEVBQVFELE9BQVlBLEVBRWhCSCxJQUNBSSxFQUFRSixVQUFZQSxFQUFVTyxTQUdsQ1AsRUFBWSxLQUNaSixFQUFTWSxLQUFLSixHQUdsQixRQUFTSyxLQUNMLE1BQU9iLEdBR1gsUUFBU2MsS0FDTCxHQUFJbkMsR0FBYSxDQUVqQixJQUFJcUIsRUFBU0MsT0FBUyxFQUNsQixJQUFLLEdBQUljLEdBQUksRUFBR0MsRUFBTWhCLEVBQVNDLE9BQVFjLEVBQUlDLEVBQUtELElBRTVDcEMsR0FBY3FCLEVBQVNlLEdBQUd2QixNQUFRUSxFQUFTZSxHQUFHUixPQUUxQ1AsRUFBU2UsR0FBR1gsWUFDWnpCLEdBQWNGLEVBQWtCdUIsRUFBU2UsR0FBR1gsV0FBYUosRUFBU2UsR0FBR1IsT0FLakYsT0FBTzVCLEdBQVdzQyxRQUFRLEdBRzlCLFFBQVNDLEtBQ0xkLEVBQVksS0FHaEIsUUFBU2UsS0FDTG5CLEVBQVNvQixPQUFPeEIsRUFBZSxHQXRGbkMsR0FBSUksTUFDQUksRUFBb0IsS0FDcEJSLEVBQW9CLEVBRXBCeUIsR0FDSTFCLGlCQUFxQkEsRUFDckJFLGlCQUFxQkEsRUFDckJFLGlCQUFxQkEsRUFDckJHLG1CQUFxQkEsRUFDckJHLGtCQUFxQkEsRUFDckJRLFlBQXFCQSxFQUNyQkMsY0FBcUJBLEVBQ3JCSSxnQkFBcUJBLEVBQ3JCQyxXQUFxQkEsRUFHN0IsT0FBT0UsR0F0Qlg1RCxRQUNLQyxPQUFPLFNBQ1AyRCxRQUFRLGNBQWU3QyxNQ0xoQyxXQU9DLFFBQVM4QyxHQUFhQyxFQUFPQyxHQXlCNUIsUUFBU0MsR0FBU25CLEVBQU1vQixFQUFRbkIsR0FDL0JvQixFQUFlckIsR0FDZnNCLEVBQXFCRixHQUNyQkcsRUFBcUJ0QixHQUd0QixRQUFTdUIsR0FBaUJDLEdBZ0J6QixNQWRBUixJQUFPUyxPQUFTLE1BQU9qRSxJQUFNa0UsSUFDM0JDLFFBQVEsU0FBVUMsR0FDbEJDLEVBQVdELEVBQ1hFLEVBQVdGLEVBQUtFLFNBRWhCTixFQUFTTyxRQUFRSCxLQUVqQkksTUFBTSxTQUFVSixFQUFNVCxHQUN0QkssRUFBU1MsT0FBTywwQkFFaEJDLFFBQVFDLElBQUlQLEdBQ1pNLFFBQVFDLElBQUloQixLQUdQSyxFQUdSLFFBQVNZLEtBRVIsTUFBb0IsUUFBaEJDLEdBQ0lBLEVBQVl4QyxVQU9yQixRQUFTeUMsS0FDUixHQUFJZCxHQUFXUCxFQUFHc0IsT0FTbEIsT0FQS1YsR0FJSkwsRUFBU08sUUFBUUYsR0FIakJMLEVBQVdELEVBQWlCQyxHQU10QkEsRUFBU2dCLFFBR2pCLFFBQVNDLEtBQ1IsTUFBT0osR0FHUixRQUFTakIsR0FBZXJCLEdBQ3ZCc0MsRUFBY3RDLEVBR2YsUUFBUzJDLEtBQ1IsTUFBT0MsR0FHUixRQUFTdEIsR0FBcUJGLEdBQzdCd0IsRUFBb0J4QixFQUdyQixRQUFTeUIsS0FDUixNQUFPZCxHQUdSLFFBQVNlLEtBQ1IsTUFBT0MsR0FHUixRQUFTeEIsR0FBcUJ0QixHQUM3QjhDLEVBQWdCOUMsRUFHakIsUUFBUytDLEdBQW1CN0MsR0FFM0JtQyxFQUFjUixFQUFNbUIsU0FBU0MsT0FBTyxTQUFDQyxHQUFELE1BQVVBLEdBQUtoRCxLQUFPQSxJQUFJLEdBRXpEbUMsSUFDSkEsRUFBY1IsRUFBTXNCLE9BQU9GLE9BQU8sU0FBQ0MsR0FBRCxNQUFVQSxHQUFLaEQsS0FBT0EsSUFBSSxJQXhHOUQsR0FBSXdCLEdBQW9CLGFBQ3ZCRyxFQUFvQixLQUNwQkMsRUFBb0IsR0FDcEJPLEVBQW9CLEtBQ3BCTSxFQUFvQixNQUNwQkcsRUFBb0IsRUFFcEJoQyxHQUNDc0IsYUFBdUJBLEVBQ3ZCRSxTQUF1QkEsRUFDdkJHLGVBQXVCQSxFQUN2QnJCLGVBQXVCQSxFQUN2QnNCLHFCQUF1QkEsRUFDdkJyQixxQkFBdUJBLEVBQ3ZCdUIsWUFBdUJBLEVBQ3ZCQyxxQkFBdUJBLEVBQ3ZCdkIscUJBQXVCQSxFQUN2QnlCLG1CQUF1QkEsRUFDdkI3QixTQUF1QkEsRUFHekIsT0FBT0osNEJBM0JSNUQsUUFDRUMsT0FBTyxTQUNQMkQsUUFBUSxlQUFnQkMsTUNMM0IsV0FPSSxRQUFTcUMsR0FBaUJuRixHQVl0QixRQUFTb0YsS0FDTCxHQUFJNUQsR0FBV3hCLEVBQVlxQyxjQUFjckMsRUFBWW1CLG1CQUNyRCxPQUFPSyxHQUFTSSxVQUdwQixRQUFTeUQsR0FBd0JDLEVBQW1CeEUsR0FDaEQsTUFBT3dFLEdBQWtCQyxLQUFLLFNBQUNOLEdBQUQsTUFBVW5FLEdBQVNvQixPQUFTK0MsRUFBSy9DLE9BR25FLFFBQVNzRCxHQUFlRixFQUFtQnhFLEdBQ3ZDLE1BQU93RSxHQUFrQk4sT0FBTyxTQUFDQyxHQUFELE1BQVVuRSxHQUFTb0IsT0FBUytDLEVBQUsvQyxPQUdyRSxRQUFTdUQsR0FBZUgsRUFBbUJ4RSxHQUVsQ3VFLEVBQXdCQyxFQUFtQnhFLEdBSTVDd0UsRUFBb0JFLEVBQWVGLEVBQW1CeEUsR0FIdER3RSxFQUFrQmxELEtBQUt0QixHQU0zQmQsRUFBWTBCLG1CQUFtQjRELEdBR25DLFFBQVNJLEdBQXFCOUQsRUFBVzBELEVBQW1CSyxHQUV4RCxHQUFJQSxFQUNBLElBQUssR0FBSXBELEdBQUksRUFBR3FELEVBQXNCRCxFQUFpQmxFLE9BQVFjLEVBQUlxRCxFQUFxQnJELElBRXBGLElBQUssR0FBSXNELEdBQUksRUFBR0MsRUFBZWxFLEVBQVVILE9BQVFvRSxFQUFJQyxFQUFjRCxJQUUzRGpFLEVBQVVpRSxHQUFHM0QsT0FBU3lELEVBQWlCcEQsR0FBR0wsT0FFMUNOLEVBQVVpRSxHQUFHRSxPQUFRLEVBQ3JCTixFQUFlSCxFQUFtQjFELEVBQVVpRSxLQTdDaEUsR0FBSWhELElBQ0F1QyxvQkFBMEJBLEVBQzFCQyx3QkFBMEJBLEVBQzFCRyxlQUEwQkEsRUFDMUJDLGVBQTBCQSxFQUMxQkMscUJBQTBCQSxFQUc5QixPQUFPN0MsNkJBZFg1RCxRQUNLQyxPQUFPLFNBQ1AyRCxRQUFRLG1CQUFvQnNDLE1DTHJDLFdBWUksUUFBU2EsTUFUVC9HLFFBQ0tDLE9BQU8sU0FDUCtHLFVBQVUsV0FDUEMsWUFBYyxnREFDZEMsWUFDQTFHLGFBQWUsTUFDZkMsV0FBYXNHLE9DVHpCLFdBWUksUUFBU0ksR0FBZXRELEVBQWM5QyxHQVNsQyxRQUFTcUcsR0FBU3ZFLEVBQU1SLEdBQ3BCdEIsRUFBWXFCLGlCQUFpQkMsR0FDN0J3QixFQUFhZ0MsbUJBQW1CaEQsRUFBS0csSUFDckNhLEVBQWFPLHFCQUFxQnZCLEVBQUtDLFFBQ3ZDZSxFQUFhTSxxQkFBcUIsUUFYdEMsR0FBTWtELEdBQUt4RyxJQUVYd0csR0FBR3pDLFNBQWFmLEVBQWE2QixjQUM3QjJCLEVBQUc5RSxTQUFheEIsRUFBWXFDLGNBQzVCaUUsRUFBR25HLFdBQWFILEVBQVlzQyxnQkFDNUJnRSxFQUFHRCxTQUFhQSwyQ0FoQnBCcEgsUUFDS0MsT0FBTyxTQUNQK0csVUFBVSxZQUNQQyxZQUFjLGtEQUNkQyxZQUNBMUcsYUFBZSxPQUNmQyxXQUFhMEcsT0NUekIsV0FjSSxRQUFTRyxNQVhUdEgsUUFDS0MsT0FBTyxTQUNQK0csVUFBVSxnQkFDUEMsWUFBYywwREFDZEMsVUFDSUssTUFBTyxLQUVYL0csYUFBZSxXQUNmQyxXQUFhNkcsT0NYekIsV0FZSSxRQUFTRSxHQUFxQjNELEdBWTFCLFFBQVM0RCxLQUNMNUQsRUFBYXVCLFdBQ1JzQyxLQUFLQyxHQUdkLFFBQVNBLEdBQVVDLEdBQ2ZQLEVBQUd6QyxTQUFXZ0QsRUFBVWhELFNBQ3hCcUIsRUFBYzJCLEVBQVUzQixPQUc1QixRQUFTNEIsR0FBVUMsR0FDZmpFLEVBQWFHLFNBQVM4RCxFQUFPLE1BQU8sR0FHeEMsUUFBU0MsS0FFTCxNQUFJVixHQUFHVyxlQUNJL0IsRUFBT0YsT0FBTyxTQUFDQyxHQUFELE1BQVVBLEdBQUtpQyxVQUFXLElBR3hDaEMsRUE5QmYsR0FBTW9CLEdBQVN4RyxLQUNUb0YsSUFFTm9CLEdBQUdXLGdCQUFtQixFQUN0QlgsRUFBR3pDLFNBQW1CLEdBQ3RCeUMsRUFBR1EsVUFBbUJBLEVBQ3RCUixFQUFHVSxpQkFBbUJBLEVBRXRCTiwrQkFuQkp6SCxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLGNBQ1BDLFlBQWMsMERBQ2RDLFlBQ0ExRyxhQUFlLGFBQ2ZDLFdBQWErRyxPQ1R6QixXQVlJLFFBQVNVLE1BVFRsSSxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLGFBQ1BDLFlBQWMsb0RBQ2RDLFlBQ0ExRyxhQUFlLFFBQ2ZDLFdBQWF5SCxPQ1R6QixXQVlJLFFBQVNDLE1BVFRuSSxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLGNBQ1BDLFlBQWMsc0RBQ2RDLFlBQ0ExRyxhQUFlLFNBQ2ZDLFdBQWEwSCxPQ1R6QixXQVlJLFFBQVNDLE1BVFRwSSxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLGNBQ1BDLFlBQWMsc0RBQ2RDLFlBQ0ExRyxhQUFlLFNBQ2ZDLFdBQWEySCxPQ1R6QixXQVlJLFFBQVNDLE1BVFRySSxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLFlBQ1BDLFlBQWMsa0RBQ2RDLFlBQ0ExRyxhQUFlLE9BQ2ZDLFdBQWE0SCxPQ1R6QixXQVlJLFFBQVNDLE1BVFR0SSxRQUNLQyxPQUFPLFNBQ1ArRyxVQUFVLFlBQ1BDLFlBQWMsa0RBQ2RDLFlBQ0ExRyxhQUFlLE9BQ2ZDLFdBQWE2SCxPQ1R6QixXQWNDLFFBQVM1SCxHQUFlbUQsRUFBYzlDLEdBYXJDLFFBQVN3SCxLQUNSeEgsRUFBWTZCLGtCQUFrQnlFLEVBQUdsQyxZQUFha0MsRUFBR21CLGNBR2xELFFBQVM5RSxLQUNSM0MsRUFBWTJDLGFBQ1ozQyxFQUFZMEMsa0JBR2IsUUFBU2dGLEtBQ1IxSCxFQUFZMkMsYUFDWjJELEVBQUdrQixVQXRCSixHQUFNbEIsR0FBS3hHLElBRVh3RyxHQUFHbEMsWUFBZXRCLEVBQWEwQixpQkFDL0I4QixFQUFHekMsU0FBZWYsRUFBYTZCLGNBQy9CMkIsRUFBR21CLGFBQWUzRSxFQUFhOEIsdUJBQy9CMEIsRUFBR3FCLFdBQWU3RSxFQUFhMkIsdUJBQy9CNkIsRUFBR3NCLFVBQWU1SCxFQUFZdUIsbUJBQzlCK0UsRUFBR2tCLFFBQWVBLEVBQ2xCbEIsRUFBRzNELFdBQWVBLEVBQ2xCMkQsRUFBR29CLFNBQWVBLDJDQXRCbkJ6SSxRQUNFQyxPQUFPLFNBQ1ArRyxVQUFVLFlBQ1ZDLFlBQWMsa0RBQ2RDLFVBQ0NwRyxLQUFNLEtBRVBOLGFBQWUsT0FDZkMsV0FBYUMsT0NYaEIsV0FZQyxRQUFTa0ksR0FBb0IvRSxHQVU1QixRQUFTNEQsS0FDUjVELEVBQWF1QixXQUNYc0MsS0FBS21CLEdBR1IsUUFBU0EsR0FBWUMsR0FDcEJ6QixFQUFHekMsU0FBV2tFLEVBQVNsRSxTQUN2QnlDLEVBQUd2QixTQUFXZ0QsRUFBU2hELFNBR3hCLFFBQVM5QixHQUFTbkIsR0FDakJnQixFQUFhRyxTQUFTbkIsRUFBTSxNQUFPLEdBbkJwQyxHQUFNd0UsR0FBS3hHLElBRVh3RyxHQUFHckQsU0FBV0EsRUFDZHFELEVBQUd6QyxTQUFXLEdBQ2R5QyxFQUFHdkIsU0FBVyxLQUVkMkIsK0JBakJEekgsUUFDRUMsT0FBTyxTQUNQK0csVUFBVSxhQUNWQyxZQUFjLHdEQUNkQyxZQUNBMUcsYUFBZSxZQUNmQyxXQUFhbUksT0NUaEIsV0FZSSxRQUFTRyxNQVRUL0ksUUFDS0MsT0FBTyxTQUNQK0csVUFBVSxZQUNQQyxZQUFjLGtEQUNkQyxZQUNBMUcsYUFBZSxPQUNmQyxXQUFhc0ksT0NUekIsV0FjSSxRQUFTQyxHQUFvQm5GLEVBQWNxQyxHQWV2QyxRQUFTK0MsS0FDRDVCLEVBQUcxRSxXQUNIMEUsRUFBRzFFLFVBQVV1RyxRQUFRLFNBQUNsRCxHQUFELE1BQVVBLEdBQUtjLE9BQVEsSUFJcEQsUUFBU04sR0FBZTNFLEdBQ3BCcUUsRUFBaUJNLGVBQWVILEVBQW1CeEUsR0FwQnZELEdBQU13RixHQUFvQnhHLEtBQ3BCd0YsSUFPTixJQUxBZ0IsRUFBRzFFLFVBQWlCa0IsRUFBYXFCLGVBQ2pDbUMsRUFBR2IsZUFBaUJBLEVBRXBCeUMsSUFFNEMsU0FBeENwRixFQUFhMkIsdUJBQW1DLENBQ2hELEdBQUlrQixHQUFtQlIsRUFBaUJDLHFCQUN4Q0QsR0FBaUJPLHFCQUFxQlksRUFBRzFFLFVBQVcwRCxFQUFtQkssa0RBdkIvRTFHLFFBQ0tDLE9BQU8sU0FDUCtHLFVBQVUsaUJBQ1BDLFlBQWMsNERBQ2RDLFVBQ0l0QyxTQUFVLEtBRWRwRSxhQUFlLE1BQ2ZDLFdBQWF1SSxPQ1h6QixXQWNJLFFBQVNHLEtBT0wsUUFBU0MsR0FBVUMsR0FDZmhDLEVBQUdpQyxPQUFTRCxFQUdoQixRQUFTRSxHQUFVRixHQUNmLE1BQU9oQyxHQUFHaUMsU0FBV0QsRUFWekIsR0FBTWhDLEdBQUt4RyxJQUVYd0csR0FBRytCLFVBQVlBLEVBQ2YvQixFQUFHa0MsVUFBWUEsRUFoQm5CdkosUUFDS0MsT0FBTyxTQUNQK0csVUFBVSxlQUNQQyxZQUFjLGdFQUNkQyxVQUNJb0MsT0FBUSxLQUVaOUksYUFBZSxTQUNmQyxXQUFhMEkiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIsIFtcInVpLnJvdXRlclwiXSk7XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmNvbmZpZyhjb25maWcpO1xuXG4gICAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcblxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImFwcFwiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL2FwcFwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGFwcC1wYWdlPjwvYXBwLXBhZ2U+XCJcbiAgICAgICAgfSkuc3RhdGUoXCJhcHAubWFpblwiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL21haW5cIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxtYWluLXBhZ2U+PC9tYWluLXBhZ2U+XCJcbiAgICAgICAgfSkuc3RhdGUoXCJhcHAubWFpbi5tZWFsc1wiLCB7XG4gICAgICAgICAgICB1cmw6IFwiL21lYWxzXCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bWVhbHMtbGlzdCBpZD0nbWVhbHNMaXN0Jz48L21lYWxzLWxpc3Q+XCJcbiAgICAgICAgfSkuc3RhdGUoXCJhcHAubWFpbi5kcmlua3NcIiwge1xuICAgICAgICAgICAgdXJsOiBcIi9kcmlua3NcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkcmlua3MtbGlzdD48L2RyaW5rcy1saXN0PlwiXG4gICAgICAgIH0pLnN0YXRlKFwiYXBwLm1lYWxcIiwge1xuICAgICAgICAgICAgdXJsOiBcIi9tZWFsLzpwYXRoXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6IFwibWVhbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogTWVhbENvbnRyb2xsZXIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bWVhbC1wYWdlIGlkPSdtZWFsJyBwYXRoPSd7eyBtZWFsLnBhdGggfX0nPjwvbWVhbC1wYWdlPlwiXG4gICAgICAgIH0pLnN0YXRlKFwiYXBwLmNhcnRcIiwge1xuICAgICAgICAgICAgdXJsOiBcIi9jYXJ0XCIsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8Y2FydC1wYWdlIGlkPSdjYXJ0Jz48L2NhcnQtcGFnZT5cIlxuICAgICAgICB9KS5zdGF0ZShcImVycm9yXCIsIHtcbiAgICAgICAgICAgIHVybDogXCIvZXJyb3JcIixcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxlcnJvci1wYWdlPjwvZXJyb3ItcGFnZT5cIlxuICAgICAgICB9KTtcblxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2FwcC9tYWluL21lYWxzXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIE1lYWxDb250cm9sbGVyKCRzdGF0ZVBhcmFtcykge1xuICAgICAgICB0aGlzLnBhdGggPSAkc3RhdGVQYXJhbXMucGF0aDtcbiAgICB9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmZhY3RvcnkoXCJDYXJ0RmFjdG9yeVwiLCBDYXJ0RmFjdG9yeSk7XG5cbiAgICBmdW5jdGlvbiBDYXJ0RmFjdG9yeSgpIHtcblxuICAgICAgICB2YXIgY2FydExpc3QgPSBbXSxcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IG51bGwsXG4gICAgICAgICAgICBpbmRleEVkaXRNZWFsID0gMCxcbiAgICAgICAgICAgIGZhY3RvcnkgPSB7XG4gICAgICAgICAgICBnZXRJbmRleEVkaXRNZWFsOiBnZXRJbmRleEVkaXRNZWFsLFxuICAgICAgICAgICAgc2V0SW5kZXhFZGl0TWVhbDogc2V0SW5kZXhFZGl0TWVhbCxcbiAgICAgICAgICAgIGdldENhcnRMaXN0Q291bnQ6IGdldENhcnRMaXN0Q291bnQsXG4gICAgICAgICAgICBhZGRNb2RpZmllcnNUb0xpc3Q6IGFkZE1vZGlmaWVyc1RvTGlzdCxcbiAgICAgICAgICAgIGFkZE1lYWxUb0NhcnRMaXN0OiBhZGRNZWFsVG9DYXJ0TGlzdCxcbiAgICAgICAgICAgIGdldENhcnRMaXN0OiBnZXRDYXJ0TGlzdCxcbiAgICAgICAgICAgIGdldFRvdGFsUHJpY2U6IGdldFRvdGFsUHJpY2UsXG4gICAgICAgICAgICBkZWxldGVNb2RpZmllcnM6IGRlbGV0ZU1vZGlmaWVycyxcbiAgICAgICAgICAgIHJlbW92ZU1lYWw6IHJlbW92ZU1lYWxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZmFjdG9yeTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRNb2RpZmllcnNQcmljZShtb2RpZmllcnNBcnIpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbFByaWNlID0gMDtcblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbW9kaWZpZXJzQXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kaWZpZXIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IG1vZGlmaWVyLnByaWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0b3RhbFByaWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5kZXhFZGl0TWVhbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleEVkaXRNZWFsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5kZXhFZGl0TWVhbChpbmRleCkge1xuICAgICAgICAgICAgaW5kZXhFZGl0TWVhbCA9IGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FydExpc3RDb3VudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRNb2RpZmllcnNUb0xpc3QobW9kaWYpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IG1vZGlmO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkTWVhbFRvQ2FydExpc3QobWVhbCwgYW1vdW50KSB7XG4gICAgICAgICAgICB2YXIgbmV3TWVhbCA9IHt9O1xuXG4gICAgICAgICAgICBuZXdNZWFsLmlkID0gbWVhbC5pZDtcbiAgICAgICAgICAgIG5ld01lYWwubmFtZSA9IG1lYWwubmFtZTtcbiAgICAgICAgICAgIG5ld01lYWwucHJpY2UgPSBtZWFsLnByaWNlO1xuICAgICAgICAgICAgbmV3TWVhbC5hbW91bnQgPSBhbW91bnQ7XG5cbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICBuZXdNZWFsLm1vZGlmaWVycyA9IG1vZGlmaWVycy5zbGljZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBudWxsO1xuICAgICAgICAgICAgY2FydExpc3QucHVzaChuZXdNZWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcnRMaXN0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhcnRMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VG90YWxQcmljZSgpIHtcbiAgICAgICAgICAgIHZhciB0b3RhbFByaWNlID0gMDtcblxuICAgICAgICAgICAgaWYgKGNhcnRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FydExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IGNhcnRMaXN0W2ldLnByaWNlICogY2FydExpc3RbaV0uYW1vdW50O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJ0TGlzdFtpXS5tb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUHJpY2UgKz0gZ2V0TW9kaWZpZXJzUHJpY2UoY2FydExpc3RbaV0ubW9kaWZpZXJzKSAqIGNhcnRMaXN0W2ldLmFtb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRvdGFsUHJpY2UudG9GaXhlZCgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVycygpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVNZWFsKCkge1xuICAgICAgICAgICAgY2FydExpc3Quc3BsaWNlKGluZGV4RWRpdE1lYWwsIDEpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmZhY3RvcnkoXCJNZWFsc0ZhY3RvcnlcIiwgTWVhbHNGYWN0b3J5KTtcblxuXHRmdW5jdGlvbiBNZWFsc0ZhY3RvcnkoJGh0dHAsICRxKSB7XG5cblx0XHR2YXIgbWVhbEFwaVVybCA9IFwibWVhbHMuanNvblwiLFxuXHRcdCAgICBtZWFscyA9IG51bGwsXG5cdFx0ICAgIGN1cnJlbmN5ID0gXCJcIixcblx0XHQgICAgY3VycmVudE1lYWwgPSBudWxsLFxuXHRcdCAgICBjdXJyZW50TWVhbFN0YXR1cyA9IFwibmV3XCIsXG5cdFx0ICAgIGN1cnJlbnRBbW91bnQgPSAxLFxuXHRcdCAgICBmYWN0b3J5ID0ge1xuXHRcdFx0Z2V0TW9kaWZpZXJzOiBnZXRNb2RpZmllcnMsXG5cdFx0XHRnZXRNZWFsczogZ2V0TWVhbHMsXG5cdFx0XHRnZXRDdXJyZW50TWVhbDogZ2V0Q3VycmVudE1lYWwsXG5cdFx0XHRzZXRDdXJyZW50TWVhbDogc2V0Q3VycmVudE1lYWwsXG5cdFx0XHRnZXRDdXJyZW50TWVhbFN0YXR1czogZ2V0Q3VycmVudE1lYWxTdGF0dXMsXG5cdFx0XHRzZXRDdXJyZW50TWVhbFN0YXR1czogc2V0Q3VycmVudE1lYWxTdGF0dXMsXG5cdFx0XHRnZXRDdXJyZW5jeTogZ2V0Q3VycmVuY3ksXG5cdFx0XHRnZXRDdXJyZW50TWVhbEFtb3VudDogZ2V0Q3VycmVudE1lYWxBbW91bnQsXG5cdFx0XHRzZXRDdXJyZW50TWVhbEFtb3VudDogc2V0Q3VycmVudE1lYWxBbW91bnQsXG5cdFx0XHRzZXRDdXJyZW50TWVhbEJ5SWQ6IHNldEN1cnJlbnRNZWFsQnlJZCxcblx0XHRcdG9wZW5NZWFsOiBvcGVuTWVhbFxuXHRcdH07XG5cblx0XHRyZXR1cm4gZmFjdG9yeTtcblxuXHRcdGZ1bmN0aW9uIG9wZW5NZWFsKG1lYWwsIHN0YXR1cywgYW1vdW50KSB7XG5cdFx0XHRzZXRDdXJyZW50TWVhbChtZWFsKTtcblx0XHRcdHNldEN1cnJlbnRNZWFsU3RhdHVzKHN0YXR1cyk7XG5cdFx0XHRzZXRDdXJyZW50TWVhbEFtb3VudChhbW91bnQpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE1lYWxzRnJvbUh0dHAoZGVmZXJyZWQpIHtcblxuXHRcdFx0JGh0dHAoeyBtZXRob2Q6IFwiR0VUXCIsIHVybDogbWVhbEFwaVVybCB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdG1lYWxzID0gZGF0YTtcblx0XHRcdFx0Y3VycmVuY3kgPSBkYXRhLmN1cnJlbmN5O1xuXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG5cdFx0XHR9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdChcIkVycm9yIGluICRodHRwIHJlcXVlc3RcIik7XG5cblx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKHN0YXR1cyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGRlZmVycmVkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE1vZGlmaWVycygpIHtcblxuXHRcdFx0aWYgKGN1cnJlbnRNZWFsICE9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50TWVhbC5tb2RpZmllcnM7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0TWVhbHMoKSB7XG5cdFx0XHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG5cdFx0XHRpZiAoIW1lYWxzKSB7XG5cdFx0XHRcdGRlZmVycmVkID0gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG1lYWxzKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVudE1lYWwoKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVudE1lYWw7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWwobWVhbCkge1xuXHRcdFx0Y3VycmVudE1lYWwgPSBtZWFsO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldEN1cnJlbnRNZWFsU3RhdHVzKCkge1xuXHRcdFx0cmV0dXJuIGN1cnJlbnRNZWFsU3RhdHVzO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldEN1cnJlbnRNZWFsU3RhdHVzKHN0YXR1cykge1xuXHRcdFx0Y3VycmVudE1lYWxTdGF0dXMgPSBzdGF0dXM7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVuY3koKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVuY3k7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVudE1lYWxBbW91bnQoKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVudEFtb3VudDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbEFtb3VudChhbW91bnQpIHtcblx0XHRcdGN1cnJlbnRBbW91bnQgPSBhbW91bnQ7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWxCeUlkKGlkKSB7XG5cblx0XHRcdGN1cnJlbnRNZWFsID0gbWVhbHMucHJvZHVjdHMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdHJldHVybiBpdGVtLmlkID09PSBpZDtcblx0XHRcdH0pWzBdO1xuXG5cdFx0XHRpZiAoIWN1cnJlbnRNZWFsKSB7XG5cdFx0XHRcdGN1cnJlbnRNZWFsID0gbWVhbHMuZHJpbmtzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLmlkID09PSBpZDtcblx0XHRcdFx0fSlbMF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmZhY3RvcnkoXCJNb2RpZmllcnNGYWN0b3J5XCIsIE1vZGlmaWVyc0ZhY3RvcnkpO1xuXG4gICAgZnVuY3Rpb24gTW9kaWZpZXJzRmFjdG9yeShDYXJ0RmFjdG9yeSkge1xuXG4gICAgICAgIHZhciBmYWN0b3J5ID0ge1xuICAgICAgICAgICAgZ2V0Q2hlY2tlZE1vZGlmaWVyczogZ2V0Q2hlY2tlZE1vZGlmaWVycyxcbiAgICAgICAgICAgIG1vZGlmaWVySGFzQmVlblNlbGVjdGVkOiBtb2RpZmllckhhc0JlZW5TZWxlY3RlZCxcbiAgICAgICAgICAgIGRlbGV0ZU1vZGlmaWVyOiBkZWxldGVNb2RpZmllcixcbiAgICAgICAgICAgIHNlbGVjdE1vZGlmaWVyOiBzZWxlY3RNb2RpZmllcixcbiAgICAgICAgICAgIHBpY2tDaGVja2VkTW9kaWZpZXJzOiBwaWNrQ2hlY2tlZE1vZGlmaWVyc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldENoZWNrZWRNb2RpZmllcnMoKSB7XG4gICAgICAgICAgICB2YXIgY2FydExpc3QgPSBDYXJ0RmFjdG9yeS5nZXRDYXJ0TGlzdCgpW0NhcnRGYWN0b3J5LmdldEluZGV4RWRpdE1lYWwoKV07XG4gICAgICAgICAgICByZXR1cm4gY2FydExpc3QubW9kaWZpZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbW9kaWZpZXJIYXNCZWVuU2VsZWN0ZWQoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RpZmllcnMuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSBpdGVtLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2RpZmllci5uYW1lICE9PSBpdGVtLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xuXG4gICAgICAgICAgICBpZiAoIW1vZGlmaWVySGFzQmVlblNlbGVjdGVkKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRNb2RpZmllcnMgPSBkZWxldGVNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBDYXJ0RmFjdG9yeS5hZGRNb2RpZmllcnNUb0xpc3Qoc2VsZWN0ZWRNb2RpZmllcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGlja0NoZWNrZWRNb2RpZmllcnMobW9kaWZpZXJzLCBzZWxlY3RlZE1vZGlmaWVycywgY2hlY2tlZE1vZGlmaWVycykge1xuXG4gICAgICAgICAgICBpZiAoY2hlY2tlZE1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5DaGVja2VkTW9kaWZpZXJzID0gY2hlY2tlZE1vZGlmaWVycy5sZW5ndGg7IGkgPCBsZW5DaGVja2VkTW9kaWZpZXJzOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuTW9kaWZpZXJzID0gbW9kaWZpZXJzLmxlbmd0aDsgaiA8IGxlbk1vZGlmaWVyczsgaisrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllcnNbal0ubmFtZSA9PT0gY2hlY2tlZE1vZGlmaWVyc1tpXS5uYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnNbal0uY2hlY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcnNbal0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJhcHBQYWdlXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9hcHAvdGVtcGxhdGUvYXBwUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImFwcFwiLFxuICAgICAgICBjb250cm9sbGVyOiBBcHBDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBBcHBDb250cm9sbGVyKCkge31cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwiY2FydFBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2NhcnQvdGVtcGxhdGUvY2FydFBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjYXJ0XCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IENhcnRDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBDYXJ0Q29udHJvbGxlcihNZWFsc0ZhY3RvcnksIENhcnRGYWN0b3J5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5jdXJyZW5jeSA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW5jeSgpO1xuICAgICAgICB2bS5jYXJ0TGlzdCA9IENhcnRGYWN0b3J5LmdldENhcnRMaXN0KCk7XG4gICAgICAgIHZtLnRvdGFsUHJpY2UgPSBDYXJ0RmFjdG9yeS5nZXRUb3RhbFByaWNlKCk7XG4gICAgICAgIHZtLmVkaXRNZWFsID0gZWRpdE1lYWw7XG5cbiAgICAgICAgZnVuY3Rpb24gZWRpdE1lYWwobWVhbCwgaW5kZXgpIHtcbiAgICAgICAgICAgIENhcnRGYWN0b3J5LnNldEluZGV4RWRpdE1lYWwoaW5kZXgpO1xuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LnNldEN1cnJlbnRNZWFsQnlJZChtZWFsLmlkKTtcbiAgICAgICAgICAgIE1lYWxzRmFjdG9yeS5zZXRDdXJyZW50TWVhbEFtb3VudChtZWFsLmFtb3VudCk7XG4gICAgICAgICAgICBNZWFsc0ZhY3Rvcnkuc2V0Q3VycmVudE1lYWxTdGF0dXMoXCJlZGl0XCIpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJjYXJ0SWNvblBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2NhcnRJY29uL3RlbXBsYXRlL2NhcnRJY29uUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7XG4gICAgICAgICAgICBjb3VudDogXCJAXCJcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImNhcnRJY29uXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IENhcnRJY29uQ29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gQ2FydEljb25Db250cm9sbGVyKCkge31cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwiZHJpbmtzTGlzdFwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvZHJpbmtzTGlzdC90ZW1wbGF0ZS9kcmlua3NMaXN0Lmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6IFwiZHJpbmtzTGlzdFwiLFxuICAgICAgICBjb250cm9sbGVyOiBEcmlua3NMaXN0Q29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gRHJpbmtzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdmFyIGRyaW5rcyA9IFtdO1xuXG4gICAgICAgIHZtLm9ubHlTb2Z0RHJpbmtzID0gZmFsc2U7XG4gICAgICAgIHZtLmN1cnJlbmN5ID0gXCJcIjtcbiAgICAgICAgdm0ub3BlbkRyaW5rID0gb3BlbkRyaW5rO1xuICAgICAgICB2bS5nZXREcmlua3NGb3JWaWV3ID0gZ2V0RHJpbmtzRm9yVmlldztcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LmdldE1lYWxzKCkudGhlbihnZXREcmlua3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RHJpbmtzKGRyaW5rc09iaikge1xuICAgICAgICAgICAgdm0uY3VycmVuY3kgPSBkcmlua3NPYmouY3VycmVuY3k7XG4gICAgICAgICAgICBkcmlua3MgPSBkcmlua3NPYmouZHJpbmtzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlbkRyaW5rKGRyaW5rKSB7XG4gICAgICAgICAgICBNZWFsc0ZhY3Rvcnkub3Blbk1lYWwoZHJpbmssIFwibmV3XCIsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RHJpbmtzRm9yVmlldygpIHtcblxuICAgICAgICAgICAgaWYgKHZtLm9ubHlTb2Z0RHJpbmtzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyaW5rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udGlwcGxlICE9PSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJpbmtzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJlcnJvclBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2Vycm9yL3RlbXBsYXRlL2Vycm9yUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImVycm9yXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IEVycm9yQ29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gRXJyb3JDb250cm9sbGVyKCkge31cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwiZm9vdGVyUGFnZVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvZm9vdGVyL3RlbXBsYXRlL2Zvb3RlclBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJmb290ZXJcIixcbiAgICAgICAgY29udHJvbGxlcjogRm9vdGVyQ29udHJvbGxlclxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gRm9vdGVyQ29udHJvbGxlcigpIHt9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmNvbXBvbmVudChcImhlYWRlclBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2hlYWRlci90ZW1wbGF0ZS9oZWFkZXJQYWdlLmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6IFwiaGVhZGVyXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IEhlYWRlckNvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoKSB7fVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJsb2dvUGFnZVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbG9nby90ZW1wbGF0ZS9sb2dvUGFnZS5odG1sXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcImxvZ29cIixcbiAgICAgICAgY29udHJvbGxlcjogTG9nb0NvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIExvZ29Db250cm9sbGVyKCkge31cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwibWFpblBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21haW4vdGVtcGxhdGUvbWFpblBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJtYWluXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IE1haW5Db250cm9sbGVyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHt9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwibWVhbFBhZ2VcIiwge1xuXHRcdHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbWVhbC90ZW1wbGF0ZS9tZWFsUGFnZS5odG1sXCIsXG5cdFx0YmluZGluZ3M6IHtcblx0XHRcdHBhdGg6IFwiQFwiXG5cdFx0fSxcblx0XHRjb250cm9sbGVyQXM6IFwibWVhbFwiLFxuXHRcdGNvbnRyb2xsZXI6IE1lYWxDb250cm9sbGVyXG5cdH0pO1xuXG5cdGZ1bmN0aW9uIE1lYWxDb250cm9sbGVyKE1lYWxzRmFjdG9yeSwgQ2FydEZhY3RvcnkpIHtcblxuXHRcdHZhciB2bSA9IHRoaXM7XG5cblx0XHR2bS5jdXJyZW50TWVhbCA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbCgpO1xuXHRcdHZtLmN1cnJlbmN5ID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbmN5KCk7XG5cdFx0dm0uc2VsZWN0QW1vdW50ID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbnRNZWFsQW1vdW50KCk7XG5cdFx0dm0ubWVhbFN0YXR1cyA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbFN0YXR1cygpO1xuXHRcdHZtLmNhcnRDb3VudCA9IENhcnRGYWN0b3J5LmdldENhcnRMaXN0Q291bnQoKTtcblx0XHR2bS5hZGRNZWFsID0gYWRkTWVhbDtcblx0XHR2bS5yZW1vdmVNZWFsID0gcmVtb3ZlTWVhbDtcblx0XHR2bS5zYXZlTWVhbCA9IHNhdmVNZWFsO1xuXG5cdFx0ZnVuY3Rpb24gYWRkTWVhbCgpIHtcblx0XHRcdENhcnRGYWN0b3J5LmFkZE1lYWxUb0NhcnRMaXN0KHZtLmN1cnJlbnRNZWFsLCB2bS5zZWxlY3RBbW91bnQpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbW92ZU1lYWwoKSB7XG5cdFx0XHRDYXJ0RmFjdG9yeS5yZW1vdmVNZWFsKCk7XG5cdFx0XHRDYXJ0RmFjdG9yeS5kZWxldGVNb2RpZmllcnMoKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzYXZlTWVhbCgpIHtcblx0XHRcdENhcnRGYWN0b3J5LnJlbW92ZU1lYWwoKTtcblx0XHRcdHZtLmFkZE1lYWwoKTtcblx0XHR9XG5cdH1cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0YW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJtZWFsc0xpc3RcIiwge1xuXHRcdHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbWVhbHNMaXN0L3RlbXBsYXRlL21lYWxzTGlzdC5odG1sXCIsXG5cdFx0YmluZGluZ3M6IHt9LFxuXHRcdGNvbnRyb2xsZXJBczogXCJtZWFsc0xpc3RcIixcblx0XHRjb250cm9sbGVyOiBNZWFsc0xpc3RDb250cm9sbGVyXG5cdH0pO1xuXG5cdGZ1bmN0aW9uIE1lYWxzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XG5cblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0dm0ub3Blbk1lYWwgPSBvcGVuTWVhbDtcblx0XHR2bS5jdXJyZW5jeSA9IFwiXCI7XG5cdFx0dm0ucHJvZHVjdHMgPSBudWxsO1xuXG5cdFx0YWN0aXZhdGUoKTtcblxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuXHRcdFx0TWVhbHNGYWN0b3J5LmdldE1lYWxzKCkudGhlbihnZXRQcm9kdWN0cyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0UHJvZHVjdHMobWVhbHNPYmopIHtcblx0XHRcdHZtLmN1cnJlbmN5ID0gbWVhbHNPYmouY3VycmVuY3k7XG5cdFx0XHR2bS5wcm9kdWN0cyA9IG1lYWxzT2JqLnByb2R1Y3RzO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9wZW5NZWFsKG1lYWwpIHtcblx0XHRcdE1lYWxzRmFjdG9yeS5vcGVuTWVhbChtZWFsLCBcIm5ld1wiLCAxKTtcblx0XHR9XG5cdH1cbn0pKCk7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKFwiTWVhbHNcIikuY29tcG9uZW50KFwibWVudVBhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lbnUvdGVtcGxhdGUvbWVudVBhZ2UuaHRtbFwiLFxuICAgICAgICBiaW5kaW5nczoge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJtZW51XCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IE1lbnVDb250cm9sbGVyXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBNZW51Q29udHJvbGxlcigpIHt9XG59KSgpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcIk1lYWxzXCIpLmNvbXBvbmVudChcIm1vZGlmaWVyc1BhZ2VcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21vZGlmaWVycy90ZW1wbGF0ZS9tb2RpZmllcnNQYWdlLmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBcIkBcIlxuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyQXM6IFwibW9kXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IE1vZGlmaWVyc0NvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIE1vZGlmaWVyc0NvbnRyb2xsZXIoTWVhbHNGYWN0b3J5LCBNb2RpZmllcnNGYWN0b3J5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdmFyIHNlbGVjdGVkTW9kaWZpZXJzID0gW107XG5cbiAgICAgICAgdm0ubW9kaWZpZXJzID0gTWVhbHNGYWN0b3J5LmdldE1vZGlmaWVycygpO1xuICAgICAgICB2bS5zZWxlY3RNb2RpZmllciA9IHNlbGVjdE1vZGlmaWVyO1xuXG4gICAgICAgIGNsZWFuUGlja01vZGlmaWVycygpO1xuXG4gICAgICAgIGlmIChNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWxTdGF0dXMoKSA9PT0gXCJlZGl0XCIpIHtcbiAgICAgICAgICAgIHZhciBjaGVja2VkTW9kaWZpZXJzID0gTW9kaWZpZXJzRmFjdG9yeS5nZXRDaGVja2VkTW9kaWZpZXJzKCk7XG4gICAgICAgICAgICBNb2RpZmllcnNGYWN0b3J5LnBpY2tDaGVja2VkTW9kaWZpZXJzKHZtLm1vZGlmaWVycywgc2VsZWN0ZWRNb2RpZmllcnMsIGNoZWNrZWRNb2RpZmllcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xlYW5QaWNrTW9kaWZpZXJzKCkge1xuICAgICAgICAgICAgaWYgKHZtLm1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIHZtLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmNoZWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZWxlY3RNb2RpZmllcihtb2RpZmllcikge1xuICAgICAgICAgICAgTW9kaWZpZXJzRmFjdG9yeS5zZWxlY3RNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJNZWFsc1wiKS5jb21wb25lbnQoXCJzZWxlY3RDb3VudFwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvc2VsZWN0Q291bnQvdGVtcGxhdGUvc2VsZWN0Q291bnRQYWdlLmh0bWxcIixcbiAgICAgICAgYmluZGluZ3M6IHtcbiAgICAgICAgICAgIHNlbGVjdDogXCI9XCJcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlckFzOiBcInNlbGVjdFwiLFxuICAgICAgICBjb250cm9sbGVyOiBTZWxlY3RDb3VudENvbnRyb2xsZXJcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIFNlbGVjdENvdW50Q29udHJvbGxlcigpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLnNlbGVjdE51bSA9IHNlbGVjdE51bTtcbiAgICAgICAgdm0uYWN0aXZlTnVtID0gYWN0aXZlTnVtO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE51bShudW0pIHtcbiAgICAgICAgICAgIHZtLnNlbGVjdCA9IG51bTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2ZU51bShudW0pIHtcbiAgICAgICAgICAgIHJldHVybiB2bS5zZWxlY3QgPT09IG51bTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiLCBbXCJ1aS5yb3V0ZXJcIl0pO1xyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgLnN0YXRlKFwiYXBwXCIsIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvYXBwXCIsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8YXBwLXBhZ2U+PC9hcHAtcGFnZT5cIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoXCJhcHAubWFpblwiLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiL21haW5cIixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxtYWluLXBhZ2U+PC9tYWluLXBhZ2U+XCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKFwiYXBwLm1haW4ubWVhbHNcIiwge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9tZWFsc1wiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPG1lYWxzLWxpc3QgaWQ9J21lYWxzTGlzdCc+PC9tZWFscy1saXN0PlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZShcImFwcC5tYWluLmRyaW5rc1wiLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiL2RyaW5rc1wiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRyaW5rcy1saXN0PjwvZHJpbmtzLWxpc3Q+XCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKFwiYXBwLm1lYWxcIiwge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9tZWFsLzpwYXRoXCIsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6IFwibWVhbFwiLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogTWVhbENvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bWVhbC1wYWdlIGlkPSdtZWFsJyBwYXRoPSd7eyBtZWFsLnBhdGggfX0nPjwvbWVhbC1wYWdlPlwiLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoXCJhcHAuY2FydFwiLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiL2NhcnRcIixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxjYXJ0LXBhZ2UgaWQ9J2NhcnQnPjwvY2FydC1wYWdlPlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZShcImVycm9yXCIsIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvZXJyb3JcIixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxlcnJvci1wYWdlPjwvZXJyb3ItcGFnZT5cIlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9hcHAvbWFpbi9tZWFsc1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBNZWFsQ29udHJvbGxlcigkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnBhdGggPSAkc3RhdGVQYXJhbXMucGF0aDtcclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLmZhY3RvcnkoXCJDYXJ0RmFjdG9yeVwiLCBDYXJ0RmFjdG9yeSk7XHJcblxyXG4gICAgZnVuY3Rpb24gQ2FydEZhY3RvcnkoKSB7XHJcblxyXG4gICAgICAgIGxldCBjYXJ0TGlzdCAgICAgICAgICA9IFtdLFxyXG4gICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICA9IG51bGwsXHJcbiAgICAgICAgICAgIGluZGV4RWRpdE1lYWwgICAgID0gMCxcclxuXHJcbiAgICAgICAgICAgIGZhY3RvcnkgPSB7XHJcbiAgICAgICAgICAgICAgICBnZXRJbmRleEVkaXRNZWFsICAgOiBnZXRJbmRleEVkaXRNZWFsLFxyXG4gICAgICAgICAgICAgICAgc2V0SW5kZXhFZGl0TWVhbCAgIDogc2V0SW5kZXhFZGl0TWVhbCxcclxuICAgICAgICAgICAgICAgIGdldENhcnRMaXN0Q291bnQgICA6IGdldENhcnRMaXN0Q291bnQsXHJcbiAgICAgICAgICAgICAgICBhZGRNb2RpZmllcnNUb0xpc3QgOiBhZGRNb2RpZmllcnNUb0xpc3QsXHJcbiAgICAgICAgICAgICAgICBhZGRNZWFsVG9DYXJ0TGlzdCAgOiBhZGRNZWFsVG9DYXJ0TGlzdCxcclxuICAgICAgICAgICAgICAgIGdldENhcnRMaXN0ICAgICAgICA6IGdldENhcnRMaXN0LFxyXG4gICAgICAgICAgICAgICAgZ2V0VG90YWxQcmljZSAgICAgIDogZ2V0VG90YWxQcmljZSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZU1vZGlmaWVycyAgICA6IGRlbGV0ZU1vZGlmaWVycyxcclxuICAgICAgICAgICAgICAgIHJlbW92ZU1lYWwgICAgICAgICA6IHJlbW92ZU1lYWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1vZGlmaWVyc1ByaWNlKG1vZGlmaWVyc0Fycikge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxQcmljZSA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBtb2RpZmllciBvZiBtb2RpZmllcnNBcnIpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsUHJpY2UgKz0gbW9kaWZpZXIucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0b3RhbFByaWNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SW5kZXhFZGl0TWVhbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4RWRpdE1lYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRJbmRleEVkaXRNZWFsKGluZGV4KSB7XHJcbiAgICAgICAgICAgIGluZGV4RWRpdE1lYWwgPSBpbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENhcnRMaXN0Q291bnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRNb2RpZmllcnNUb0xpc3QobW9kaWYpIHtcclxuICAgICAgICAgICAgbW9kaWZpZXJzID0gbW9kaWY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRNZWFsVG9DYXJ0TGlzdChtZWFsLCBhbW91bnQpIHtcclxuICAgICAgICAgICAgbGV0IG5ld01lYWwgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIG5ld01lYWwuaWQgICAgICAgID0gbWVhbC5pZDtcclxuICAgICAgICAgICAgbmV3TWVhbC5uYW1lICAgICAgPSBtZWFsLm5hbWU7XHJcbiAgICAgICAgICAgIG5ld01lYWwucHJpY2UgICAgID0gbWVhbC5wcmljZTtcclxuICAgICAgICAgICAgbmV3TWVhbC5hbW91bnQgICAgPSBhbW91bnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdNZWFsLm1vZGlmaWVycyA9IG1vZGlmaWVycy5zbGljZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBudWxsO1xyXG4gICAgICAgICAgICBjYXJ0TGlzdC5wdXNoKG5ld01lYWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FydExpc3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJ0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRvdGFsUHJpY2UoKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbFByaWNlID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXJ0TGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2FydExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQcmljZSArPSBjYXJ0TGlzdFtpXS5wcmljZSAqIGNhcnRMaXN0W2ldLmFtb3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcnRMaXN0W2ldLm1vZGlmaWVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFByaWNlICs9IGdldE1vZGlmaWVyc1ByaWNlKGNhcnRMaXN0W2ldLm1vZGlmaWVycykgKiBjYXJ0TGlzdFtpXS5hbW91bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWxQcmljZS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlTW9kaWZpZXJzKCkge1xyXG4gICAgICAgICAgICBtb2RpZmllcnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTWVhbCgpIHtcclxuICAgICAgICAgICAgY2FydExpc3Quc3BsaWNlKGluZGV4RWRpdE1lYWwsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoXCJNZWFsc1wiKVxyXG5cdFx0LmZhY3RvcnkoXCJNZWFsc0ZhY3RvcnlcIiwgTWVhbHNGYWN0b3J5KTtcclxuXHJcblx0ZnVuY3Rpb24gTWVhbHNGYWN0b3J5KCRodHRwLCAkcSkge1xyXG5cclxuXHRcdGxldCBtZWFsQXBpVXJsICAgICAgICA9IFwibWVhbHMuanNvblwiLFxyXG5cdFx0XHRtZWFscyAgICAgICAgICAgICA9IG51bGwsXHJcblx0XHRcdGN1cnJlbmN5ICAgICAgICAgID0gXCJcIixcclxuXHRcdFx0Y3VycmVudE1lYWwgICAgICAgPSBudWxsLFxyXG5cdFx0XHRjdXJyZW50TWVhbFN0YXR1cyA9IFwibmV3XCIsXHJcblx0XHRcdGN1cnJlbnRBbW91bnQgICAgID0gMSxcclxuXHJcblx0XHRcdGZhY3RvcnkgPSB7XHJcblx0XHRcdFx0Z2V0TW9kaWZpZXJzICAgICAgICAgOiBnZXRNb2RpZmllcnMsXHJcblx0XHRcdFx0Z2V0TWVhbHMgICAgICAgICAgICAgOiBnZXRNZWFscyxcclxuXHRcdFx0XHRnZXRDdXJyZW50TWVhbCAgICAgICA6IGdldEN1cnJlbnRNZWFsLFxyXG5cdFx0XHRcdHNldEN1cnJlbnRNZWFsICAgICAgIDogc2V0Q3VycmVudE1lYWwsXHJcblx0XHRcdFx0Z2V0Q3VycmVudE1lYWxTdGF0dXMgOiBnZXRDdXJyZW50TWVhbFN0YXR1cyxcclxuXHRcdFx0XHRzZXRDdXJyZW50TWVhbFN0YXR1cyA6IHNldEN1cnJlbnRNZWFsU3RhdHVzLFxyXG5cdFx0XHRcdGdldEN1cnJlbmN5ICAgICAgICAgIDogZ2V0Q3VycmVuY3ksXHJcblx0XHRcdFx0Z2V0Q3VycmVudE1lYWxBbW91bnQgOiBnZXRDdXJyZW50TWVhbEFtb3VudCxcclxuXHRcdFx0XHRzZXRDdXJyZW50TWVhbEFtb3VudCA6IHNldEN1cnJlbnRNZWFsQW1vdW50LFxyXG5cdFx0XHRcdHNldEN1cnJlbnRNZWFsQnlJZCAgIDogc2V0Q3VycmVudE1lYWxCeUlkLFxyXG5cdFx0XHRcdG9wZW5NZWFsICAgICAgICAgICAgIDogb3Blbk1lYWxcclxuXHRcdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gZmFjdG9yeTtcclxuXHRcdFxyXG5cdFx0ZnVuY3Rpb24gb3Blbk1lYWwobWVhbCwgc3RhdHVzLCBhbW91bnQpIHtcclxuXHRcdFx0c2V0Q3VycmVudE1lYWwobWVhbCk7XHJcblx0XHRcdHNldEN1cnJlbnRNZWFsU3RhdHVzKHN0YXR1cyk7XHJcblx0XHRcdHNldEN1cnJlbnRNZWFsQW1vdW50KGFtb3VudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCkge1xyXG5cclxuXHRcdFx0JGh0dHAoe21ldGhvZCA6IFwiR0VUXCIsIHVybCA6IG1lYWxBcGlVcmx9KVxyXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRcdFx0XHRtZWFscyAgICA9IGRhdGE7XHJcblx0XHRcdFx0XHRjdXJyZW5jeSA9IGRhdGEuY3VycmVuY3k7XHJcblxyXG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoXCJFcnJvciBpbiAkaHR0cCByZXF1ZXN0XCIpO1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coc3RhdHVzKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRNb2RpZmllcnMoKSB7XHJcblxyXG5cdFx0XHRpZiAoY3VycmVudE1lYWwgIT09IG51bGwpIHtcclxuXHRcdFx0XHRyZXR1cm4gY3VycmVudE1lYWwubW9kaWZpZXJzO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldE1lYWxzKCkge1xyXG5cdFx0XHRsZXQgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuXHRcdFx0aWYgKCFtZWFscykge1xyXG5cdFx0XHRcdGRlZmVycmVkID0gZ2V0TWVhbHNGcm9tSHR0cChkZWZlcnJlZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShtZWFscyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEN1cnJlbnRNZWFsKCkge1xyXG5cdFx0XHRyZXR1cm4gY3VycmVudE1lYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWwobWVhbCkge1xyXG5cdFx0XHRjdXJyZW50TWVhbCA9IG1lYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVudE1lYWxTdGF0dXMoKSB7XHJcblx0XHRcdHJldHVybiBjdXJyZW50TWVhbFN0YXR1cztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzZXRDdXJyZW50TWVhbFN0YXR1cyhzdGF0dXMpIHtcclxuXHRcdFx0Y3VycmVudE1lYWxTdGF0dXMgPSBzdGF0dXM7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0Q3VycmVuY3koKSB7XHJcblx0XHRcdHJldHVybiBjdXJyZW5jeTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRDdXJyZW50TWVhbEFtb3VudCgpIHtcclxuXHRcdFx0cmV0dXJuIGN1cnJlbnRBbW91bnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWxBbW91bnQoYW1vdW50KSB7XHJcblx0XHRcdGN1cnJlbnRBbW91bnQgPSBhbW91bnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2V0Q3VycmVudE1lYWxCeUlkKGlkKSB7XHJcblxyXG5cdFx0XHRjdXJyZW50TWVhbCA9IG1lYWxzLnByb2R1Y3RzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xyXG5cclxuXHRcdFx0aWYgKCFjdXJyZW50TWVhbCkge1xyXG5cdFx0XHRcdGN1cnJlbnRNZWFsID0gbWVhbHMuZHJpbmtzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuZmFjdG9yeShcIk1vZGlmaWVyc0ZhY3RvcnlcIiwgTW9kaWZpZXJzRmFjdG9yeSk7XHJcblxyXG4gICAgZnVuY3Rpb24gTW9kaWZpZXJzRmFjdG9yeShDYXJ0RmFjdG9yeSkge1xyXG5cclxuICAgICAgICBsZXQgZmFjdG9yeSA9IHtcclxuICAgICAgICAgICAgZ2V0Q2hlY2tlZE1vZGlmaWVycyAgICAgOiBnZXRDaGVja2VkTW9kaWZpZXJzLFxyXG4gICAgICAgICAgICBtb2RpZmllckhhc0JlZW5TZWxlY3RlZCA6IG1vZGlmaWVySGFzQmVlblNlbGVjdGVkLFxyXG4gICAgICAgICAgICBkZWxldGVNb2RpZmllciAgICAgICAgICA6IGRlbGV0ZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICBzZWxlY3RNb2RpZmllciAgICAgICAgICA6IHNlbGVjdE1vZGlmaWVyLFxyXG4gICAgICAgICAgICBwaWNrQ2hlY2tlZE1vZGlmaWVycyAgICA6IHBpY2tDaGVja2VkTW9kaWZpZXJzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENoZWNrZWRNb2RpZmllcnMoKSB7XHJcbiAgICAgICAgICAgIGxldCBjYXJ0TGlzdCA9IENhcnRGYWN0b3J5LmdldENhcnRMaXN0KClbQ2FydEZhY3RvcnkuZ2V0SW5kZXhFZGl0TWVhbCgpXTtcclxuICAgICAgICAgICAgcmV0dXJuIGNhcnRMaXN0Lm1vZGlmaWVycztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1vZGlmaWVySGFzQmVlblNlbGVjdGVkKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RpZmllcnMuc29tZSgoaXRlbSkgPT4gbW9kaWZpZXIubmFtZSA9PT0gaXRlbS5uYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRNb2RpZmllcnMuZmlsdGVyKChpdGVtKSA9PiBtb2RpZmllci5uYW1lICE9PSBpdGVtLm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0TW9kaWZpZXIoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1vZGlmaWVySGFzQmVlblNlbGVjdGVkKHNlbGVjdGVkTW9kaWZpZXJzLCBtb2RpZmllcikpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRNb2RpZmllcnMgPSBkZWxldGVNb2RpZmllcihzZWxlY3RlZE1vZGlmaWVycywgbW9kaWZpZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDYXJ0RmFjdG9yeS5hZGRNb2RpZmllcnNUb0xpc3Qoc2VsZWN0ZWRNb2RpZmllcnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGlja0NoZWNrZWRNb2RpZmllcnMobW9kaWZpZXJzLCBzZWxlY3RlZE1vZGlmaWVycywgY2hlY2tlZE1vZGlmaWVycykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoZWNrZWRNb2RpZmllcnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5DaGVja2VkTW9kaWZpZXJzID0gY2hlY2tlZE1vZGlmaWVycy5sZW5ndGg7IGkgPCBsZW5DaGVja2VkTW9kaWZpZXJzOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbk1vZGlmaWVycyA9IG1vZGlmaWVycy5sZW5ndGg7IGogPCBsZW5Nb2RpZmllcnM7IGorKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVyc1tqXS5uYW1lID09PSBjaGVja2VkTW9kaWZpZXJzW2ldLm5hbWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnNbal0uY2hlY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TW9kaWZpZXIoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29tcG9uZW50KFwiYXBwUGFnZVwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2FwcC90ZW1wbGF0ZS9hcHBQYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3MgOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJhcHBcIixcclxuICAgICAgICAgICAgY29udHJvbGxlciA6IEFwcENvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBBcHBDb250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLmNvbXBvbmVudChcImNhcnRQYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvY2FydC90ZW1wbGF0ZS9jYXJ0UGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzIDoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY2FydFwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogQ2FydENvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gQ2FydENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5LCBDYXJ0RmFjdG9yeSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0uY3VycmVuY3kgICA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW5jeSgpO1xyXG4gICAgICAgIHZtLmNhcnRMaXN0ICAgPSBDYXJ0RmFjdG9yeS5nZXRDYXJ0TGlzdCgpO1xyXG4gICAgICAgIHZtLnRvdGFsUHJpY2UgPSBDYXJ0RmFjdG9yeS5nZXRUb3RhbFByaWNlKCk7XHJcbiAgICAgICAgdm0uZWRpdE1lYWwgICA9IGVkaXRNZWFsO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZGl0TWVhbChtZWFsLCBpbmRleCkge1xyXG4gICAgICAgICAgICBDYXJ0RmFjdG9yeS5zZXRJbmRleEVkaXRNZWFsKGluZGV4KTtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LnNldEN1cnJlbnRNZWFsQnlJZChtZWFsLmlkKTtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LnNldEN1cnJlbnRNZWFsQW1vdW50KG1lYWwuYW1vdW50KTtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LnNldEN1cnJlbnRNZWFsU3RhdHVzKFwiZWRpdFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC5jb21wb25lbnQoXCJjYXJ0SWNvblBhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9jYXJ0SWNvbi90ZW1wbGF0ZS9jYXJ0SWNvblBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5ncyA6IHtcclxuICAgICAgICAgICAgICAgIGNvdW50OiBcIkBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcImNhcnRJY29uXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBDYXJ0SWNvbkNvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBDYXJ0SWNvbkNvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29tcG9uZW50KFwiZHJpbmtzTGlzdFwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL2RyaW5rc0xpc3QvdGVtcGxhdGUvZHJpbmtzTGlzdC5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzIDoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiZHJpbmtzTGlzdFwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogRHJpbmtzTGlzdENvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gRHJpbmtzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHZtICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0ICAgZHJpbmtzID0gW107XHJcblxyXG4gICAgICAgIHZtLm9ubHlTb2Z0RHJpbmtzICAgPSBmYWxzZTtcclxuICAgICAgICB2bS5jdXJyZW5jeSAgICAgICAgID0gXCJcIjtcclxuICAgICAgICB2bS5vcGVuRHJpbmsgICAgICAgID0gb3BlbkRyaW5rO1xyXG4gICAgICAgIHZtLmdldERyaW5rc0ZvclZpZXcgPSBnZXREcmlua3NGb3JWaWV3O1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5LmdldE1lYWxzKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGdldERyaW5rcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXREcmlua3MoZHJpbmtzT2JqKSB7XHJcbiAgICAgICAgICAgIHZtLmN1cnJlbmN5ID0gZHJpbmtzT2JqLmN1cnJlbmN5O1xyXG4gICAgICAgICAgICBkcmlua3MgICAgICA9IGRyaW5rc09iai5kcmlua3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvcGVuRHJpbmsoZHJpbmspIHtcclxuICAgICAgICAgICAgTWVhbHNGYWN0b3J5Lm9wZW5NZWFsKGRyaW5rLCBcIm5ld1wiLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERyaW5rc0ZvclZpZXcoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0ub25seVNvZnREcmlua3MpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkcmlua3MuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnRpcHBsZSAhPT0gdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJpbmtzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29tcG9uZW50KFwiZXJyb3JQYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvZXJyb3IvdGVtcGxhdGUvZXJyb3JQYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3MgOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogRXJyb3JDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gRXJyb3JDb250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLmNvbXBvbmVudChcImZvb3RlclBhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9mb290ZXIvdGVtcGxhdGUvZm9vdGVyUGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzIDoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiZm9vdGVyXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBGb290ZXJDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gRm9vdGVyQ29udHJvbGxlcigpIHt9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC5jb21wb25lbnQoXCJoZWFkZXJQYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvaGVhZGVyL3RlbXBsYXRlL2hlYWRlclBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5ncyA6IHt9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcImhlYWRlclwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogSGVhZGVyQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29tcG9uZW50KFwibG9nb1BhZ2VcIiwge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9sb2dvL3RlbXBsYXRlL2xvZ29QYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3MgOiB7fSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJsb2dvXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBMb2dvQ29udHJvbGxlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIExvZ29Db250cm9sbGVyKCkge31cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZShcIk1lYWxzXCIpXHJcbiAgICAgICAgLmNvbXBvbmVudChcIm1haW5QYWdlXCIsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiBcImNvbXBvbmVudC10ZW1wbGF0ZXMvbWFpbi90ZW1wbGF0ZS9tYWluUGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzIDoge30sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwibWFpblwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogTWFpbkNvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0YW5ndWxhclxyXG5cdFx0Lm1vZHVsZShcIk1lYWxzXCIpXHJcblx0XHQuY29tcG9uZW50KFwibWVhbFBhZ2VcIiwge1xyXG5cdFx0XHR0ZW1wbGF0ZVVybCA6IFwiY29tcG9uZW50LXRlbXBsYXRlcy9tZWFsL3RlbXBsYXRlL21lYWxQYWdlLmh0bWxcIixcclxuXHRcdFx0YmluZGluZ3MgOiB7XHJcblx0XHRcdFx0cGF0aDogXCJAXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0Y29udHJvbGxlckFzIDogXCJtZWFsXCIsXHJcblx0XHRcdGNvbnRyb2xsZXIgOiBNZWFsQ29udHJvbGxlclxyXG5cdFx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIE1lYWxDb250cm9sbGVyKE1lYWxzRmFjdG9yeSwgQ2FydEZhY3RvcnkpIHtcclxuXHJcblx0XHRjb25zdCB2bSA9IHRoaXM7XHJcblxyXG5cdFx0dm0uY3VycmVudE1lYWwgID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbnRNZWFsKCk7XHJcblx0XHR2bS5jdXJyZW5jeSAgICAgPSBNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVuY3koKTtcclxuXHRcdHZtLnNlbGVjdEFtb3VudCA9IE1lYWxzRmFjdG9yeS5nZXRDdXJyZW50TWVhbEFtb3VudCgpO1xyXG5cdFx0dm0ubWVhbFN0YXR1cyAgID0gTWVhbHNGYWN0b3J5LmdldEN1cnJlbnRNZWFsU3RhdHVzKCk7XHJcblx0XHR2bS5jYXJ0Q291bnQgICAgPSBDYXJ0RmFjdG9yeS5nZXRDYXJ0TGlzdENvdW50KCk7XHJcblx0XHR2bS5hZGRNZWFsICAgICAgPSBhZGRNZWFsO1xyXG5cdFx0dm0ucmVtb3ZlTWVhbCAgID0gcmVtb3ZlTWVhbDtcclxuXHRcdHZtLnNhdmVNZWFsICAgICA9IHNhdmVNZWFsO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZE1lYWwoKSB7XHJcblx0XHRcdENhcnRGYWN0b3J5LmFkZE1lYWxUb0NhcnRMaXN0KHZtLmN1cnJlbnRNZWFsLCB2bS5zZWxlY3RBbW91bnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZU1lYWwoKSB7XHJcblx0XHRcdENhcnRGYWN0b3J5LnJlbW92ZU1lYWwoKTtcclxuXHRcdFx0Q2FydEZhY3RvcnkuZGVsZXRlTW9kaWZpZXJzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2F2ZU1lYWwoKSB7XHJcblx0XHRcdENhcnRGYWN0b3J5LnJlbW92ZU1lYWwoKTtcclxuXHRcdFx0dm0uYWRkTWVhbCgpO1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoXCJNZWFsc1wiKVxyXG5cdFx0LmNvbXBvbmVudChcIm1lYWxzTGlzdFwiLCB7XHJcblx0XHRcdHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lYWxzTGlzdC90ZW1wbGF0ZS9tZWFsc0xpc3QuaHRtbFwiLFxyXG5cdFx0XHRiaW5kaW5ncyA6IHt9LFxyXG5cdFx0XHRjb250cm9sbGVyQXMgOiBcIm1lYWxzTGlzdFwiLFxyXG5cdFx0XHRjb250cm9sbGVyIDogTWVhbHNMaXN0Q29udHJvbGxlclxyXG5cdFx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIE1lYWxzTGlzdENvbnRyb2xsZXIoTWVhbHNGYWN0b3J5KSB7XHJcblxyXG5cdFx0Y29uc3Qgdm0gPSB0aGlzO1xyXG5cclxuXHRcdHZtLm9wZW5NZWFsID0gb3Blbk1lYWw7XHJcblx0XHR2bS5jdXJyZW5jeSA9IFwiXCI7XHJcblx0XHR2bS5wcm9kdWN0cyA9IG51bGw7XHJcblxyXG5cdFx0YWN0aXZhdGUoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuXHRcdFx0TWVhbHNGYWN0b3J5LmdldE1lYWxzKClcclxuXHRcdFx0XHQudGhlbihnZXRQcm9kdWN0cyk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0UHJvZHVjdHMobWVhbHNPYmopIHtcclxuXHRcdFx0dm0uY3VycmVuY3kgPSBtZWFsc09iai5jdXJyZW5jeTtcclxuXHRcdFx0dm0ucHJvZHVjdHMgPSBtZWFsc09iai5wcm9kdWN0cztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBvcGVuTWVhbChtZWFsKSB7XHJcblx0XHRcdE1lYWxzRmFjdG9yeS5vcGVuTWVhbChtZWFsLCBcIm5ld1wiLCAxKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC5jb21wb25lbnQoXCJtZW51UGFnZVwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21lbnUvdGVtcGxhdGUvbWVudVBhZ2UuaHRtbFwiLFxyXG4gICAgICAgICAgICBiaW5kaW5ncyA6IHt9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcIm1lbnVcIixcclxuICAgICAgICAgICAgY29udHJvbGxlciA6IE1lbnVDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gTWVudUNvbnRyb2xsZXIoKSB7fVxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKFwiTWVhbHNcIilcclxuICAgICAgICAuY29tcG9uZW50KFwibW9kaWZpZXJzUGFnZVwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL21vZGlmaWVycy90ZW1wbGF0ZS9tb2RpZmllcnNQYWdlLmh0bWxcIixcclxuICAgICAgICAgICAgYmluZGluZ3MgOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogXCJAXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJtb2RcIixcclxuICAgICAgICAgICAgY29udHJvbGxlciA6IE1vZGlmaWVyc0NvbnRyb2xsZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBNb2RpZmllcnNDb250cm9sbGVyKE1lYWxzRmFjdG9yeSwgTW9kaWZpZXJzRmFjdG9yeSkge1xyXG5cclxuICAgICAgICBjb25zdCB2bSAgICAgICAgICAgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0ICAgc2VsZWN0ZWRNb2RpZmllcnMgPSBbXTtcclxuXHJcbiAgICAgICAgdm0ubW9kaWZpZXJzICAgICAgPSBNZWFsc0ZhY3RvcnkuZ2V0TW9kaWZpZXJzKCk7XHJcbiAgICAgICAgdm0uc2VsZWN0TW9kaWZpZXIgPSBzZWxlY3RNb2RpZmllcjtcclxuXHJcbiAgICAgICAgY2xlYW5QaWNrTW9kaWZpZXJzKCk7XHJcblxyXG4gICAgICAgIGlmIChNZWFsc0ZhY3RvcnkuZ2V0Q3VycmVudE1lYWxTdGF0dXMoKSA9PT0gXCJlZGl0XCIpIHtcclxuICAgICAgICAgICAgbGV0IGNoZWNrZWRNb2RpZmllcnMgPSBNb2RpZmllcnNGYWN0b3J5LmdldENoZWNrZWRNb2RpZmllcnMoKTtcclxuICAgICAgICAgICAgTW9kaWZpZXJzRmFjdG9yeS5waWNrQ2hlY2tlZE1vZGlmaWVycyh2bS5tb2RpZmllcnMsIHNlbGVjdGVkTW9kaWZpZXJzLCBjaGVja2VkTW9kaWZpZXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFuUGlja01vZGlmaWVycygpIHtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGlmaWVycykge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kaWZpZXJzLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0uY2hlY2sgPSBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE1vZGlmaWVyKG1vZGlmaWVyKSB7XHJcbiAgICAgICAgICAgIE1vZGlmaWVyc0ZhY3Rvcnkuc2VsZWN0TW9kaWZpZXIoc2VsZWN0ZWRNb2RpZmllcnMsIG1vZGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoXCJNZWFsc1wiKVxyXG4gICAgICAgIC5jb21wb25lbnQoXCJzZWxlY3RDb3VudFwiLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjb21wb25lbnQtdGVtcGxhdGVzL3NlbGVjdENvdW50L3RlbXBsYXRlL3NlbGVjdENvdW50UGFnZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzIDoge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0OiBcIj1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcInNlbGVjdFwiLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyIDogU2VsZWN0Q291bnRDb250cm9sbGVyXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gU2VsZWN0Q291bnRDb250cm9sbGVyKCkge1xyXG5cclxuICAgICAgICBjb25zdCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdE51bSA9IHNlbGVjdE51bTtcclxuICAgICAgICB2bS5hY3RpdmVOdW0gPSBhY3RpdmVOdW07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdE51bShudW0pIHtcclxuICAgICAgICAgICAgdm0uc2VsZWN0ID0gbnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZlTnVtKG51bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uc2VsZWN0ID09PSBudW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyJdfQ==
